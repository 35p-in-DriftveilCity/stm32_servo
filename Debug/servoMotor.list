
servoMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b68  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08004d08  08004d08  00014d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d58  08004d58  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004d58  08004d58  00014d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d60  08004d60  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d60  08004d60  00014d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d64  08004d64  00014d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004d68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  20000068  08004dd0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b8  08004dd0  000203b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d868  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002074  00000000  00000000  0002d943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d28  00000000  00000000  0002f9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a40  00000000  00000000  000306e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017391  00000000  00000000  00031120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f1c5  00000000  00000000  000484b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008febc  00000000  00000000  00057676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e8c  00000000  00000000  000e7534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  000eb3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004cf0 	.word	0x08004cf0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004cf0 	.word	0x08004cf0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <map>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
long map(long x, long in_min, long in_max, long out_min, long out_max) {
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
 8000588:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800058a:	68fa      	ldr	r2, [r7, #12]
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	1ad3      	subs	r3, r2, r3
 8000590:	69b9      	ldr	r1, [r7, #24]
 8000592:	683a      	ldr	r2, [r7, #0]
 8000594:	1a8a      	subs	r2, r1, r2
 8000596:	fb03 f202 	mul.w	r2, r3, r2
 800059a:	6879      	ldr	r1, [r7, #4]
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	1acb      	subs	r3, r1, r3
 80005a0:	fb92 f2f3 	sdiv	r2, r2, r3
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	4413      	add	r3, r2
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3714      	adds	r7, #20
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 fc47 	bl	8000e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f839 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 f9b5 	bl	8000930 <MX_GPIO_Init>
  MX_TIM1_Init();
 80005c6:	f000 f893 	bl	80006f0 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80005ca:	f000 f987 	bl	80008dc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80005ce:	f000 f931 	bl	8000834 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005d2:	2100      	movs	r1, #0
 80005d4:	4813      	ldr	r0, [pc, #76]	; (8000624 <main+0x70>)
 80005d6:	f001 fcf7 	bl	8001fc8 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80005da:	2100      	movs	r1, #0
 80005dc:	4812      	ldr	r0, [pc, #72]	; (8000628 <main+0x74>)
 80005de:	f001 fe49 	bl	8002274 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 80005e2:	2104      	movs	r1, #4
 80005e4:	4810      	ldr	r0, [pc, #64]	; (8000628 <main+0x74>)
 80005e6:	f001 fe45 	bl	8002274 <HAL_TIM_Encoder_Start>
	initUart(&huart2);
 80005ea:	4810      	ldr	r0, [pc, #64]	; (800062c <main+0x78>)
 80005ec:	f000 fbaa 	bl	8000d44 <initUart>
//  	}
//  	for(int i = 0; i<max; i++){
//  		htim1.Instance->CCR1 = (max-i) + min;
//  		HAL_Delay(1);
//  	}
		int angleServo = map(htim3.Instance->CNT, 0, 100, 500, 2500);//min = 472, max = 2512 >> about 500 to 2500 ?
 80005f0:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <main+0x74>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005f6:	4618      	mov	r0, r3
 80005f8:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000602:	2264      	movs	r2, #100	; 0x64
 8000604:	2100      	movs	r1, #0
 8000606:	f7ff ffb9 	bl	800057c <map>
 800060a:	6078      	str	r0, [r7, #4]
		htim1.Instance->CCR1 = angleServo;
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <main+0x70>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	635a      	str	r2, [r3, #52]	; 0x34
		printf("%d\n", angleServo);
 8000614:	6879      	ldr	r1, [r7, #4]
 8000616:	4806      	ldr	r0, [pc, #24]	; (8000630 <main+0x7c>)
 8000618:	f003 fcf4 	bl	8004004 <iprintf>
		HAL_Delay(100);
 800061c:	2064      	movs	r0, #100	; 0x64
 800061e:	f000 fc87 	bl	8000f30 <HAL_Delay>
	while (1){
 8000622:	e7e5      	b.n	80005f0 <main+0x3c>
 8000624:	20000084 	.word	0x20000084
 8000628:	200000cc 	.word	0x200000cc
 800062c:	20000114 	.word	0x20000114
 8000630:	08004d08 	.word	0x08004d08

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	; 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	2230      	movs	r2, #48	; 0x30
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f003 fd33 	bl	80040ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	4b22      	ldr	r3, [pc, #136]	; (80006e8 <SystemClock_Config+0xb4>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemClock_Config+0xb4>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	; 0x40
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <SystemClock_Config+0xb4>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <SystemClock_Config+0xb8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemClock_Config+0xb8>)
 800067e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b19      	ldr	r3, [pc, #100]	; (80006ec <SystemClock_Config+0xb8>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000690:	2302      	movs	r3, #2
 8000692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000694:	2301      	movs	r3, #1
 8000696:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000698:	2310      	movs	r3, #16
 800069a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800069c:	2300      	movs	r3, #0
 800069e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 0320 	add.w	r3, r7, #32
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 ff8f 	bl	80015c8 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006b0:	f000 f958 	bl	8000964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b8:	2300      	movs	r3, #0
 80006ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 f9f2 	bl	8001ab8 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006da:	f000 f943 	bl	8000964 <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	; 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b096      	sub	sp, #88	; 0x58
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000704:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800070e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]
 800071e:	615a      	str	r2, [r3, #20]
 8000720:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2220      	movs	r2, #32
 8000726:	2100      	movs	r1, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f003 fcc0 	bl	80040ae <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800072e:	4b3f      	ldr	r3, [pc, #252]	; (800082c <MX_TIM1_Init+0x13c>)
 8000730:	4a3f      	ldr	r2, [pc, #252]	; (8000830 <MX_TIM1_Init+0x140>)
 8000732:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8000734:	4b3d      	ldr	r3, [pc, #244]	; (800082c <MX_TIM1_Init+0x13c>)
 8000736:	220f      	movs	r2, #15
 8000738:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073a:	4b3c      	ldr	r3, [pc, #240]	; (800082c <MX_TIM1_Init+0x13c>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8000740:	4b3a      	ldr	r3, [pc, #232]	; (800082c <MX_TIM1_Init+0x13c>)
 8000742:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000746:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000748:	4b38      	ldr	r3, [pc, #224]	; (800082c <MX_TIM1_Init+0x13c>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800074e:	4b37      	ldr	r3, [pc, #220]	; (800082c <MX_TIM1_Init+0x13c>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000754:	4b35      	ldr	r3, [pc, #212]	; (800082c <MX_TIM1_Init+0x13c>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800075a:	4834      	ldr	r0, [pc, #208]	; (800082c <MX_TIM1_Init+0x13c>)
 800075c:	f001 fb8c 	bl	8001e78 <HAL_TIM_Base_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000766:	f000 f8fd 	bl	8000964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800076a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000770:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000774:	4619      	mov	r1, r3
 8000776:	482d      	ldr	r0, [pc, #180]	; (800082c <MX_TIM1_Init+0x13c>)
 8000778:	f001 fecc 	bl	8002514 <HAL_TIM_ConfigClockSource>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000782:	f000 f8ef 	bl	8000964 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000786:	4829      	ldr	r0, [pc, #164]	; (800082c <MX_TIM1_Init+0x13c>)
 8000788:	f001 fbc5 	bl	8001f16 <HAL_TIM_PWM_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000792:	f000 f8e7 	bl	8000964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000796:	2300      	movs	r3, #0
 8000798:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800079a:	2300      	movs	r3, #0
 800079c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800079e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007a2:	4619      	mov	r1, r3
 80007a4:	4821      	ldr	r0, [pc, #132]	; (800082c <MX_TIM1_Init+0x13c>)
 80007a6:	f002 fa55 	bl	8002c54 <HAL_TIMEx_MasterConfigSynchronization>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80007b0:	f000 f8d8 	bl	8000964 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b4:	2360      	movs	r3, #96	; 0x60
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1500-1;
 80007b8:	f240 53db 	movw	r3, #1499	; 0x5db
 80007bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007be:	2300      	movs	r3, #0
 80007c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007c2:	2300      	movs	r3, #0
 80007c4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007ca:	2300      	movs	r3, #0
 80007cc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007ce:	2300      	movs	r3, #0
 80007d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d6:	2200      	movs	r2, #0
 80007d8:	4619      	mov	r1, r3
 80007da:	4814      	ldr	r0, [pc, #80]	; (800082c <MX_TIM1_Init+0x13c>)
 80007dc:	f001 fdd8 	bl	8002390 <HAL_TIM_PWM_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80007e6:	f000 f8bd 	bl	8000964 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000802:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000804:	2300      	movs	r3, #0
 8000806:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	4619      	mov	r1, r3
 800080c:	4807      	ldr	r0, [pc, #28]	; (800082c <MX_TIM1_Init+0x13c>)
 800080e:	f002 fa8f 	bl	8002d30 <HAL_TIMEx_ConfigBreakDeadTime>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000818:	f000 f8a4 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800081c:	4803      	ldr	r0, [pc, #12]	; (800082c <MX_TIM1_Init+0x13c>)
 800081e:	f000 f939 	bl	8000a94 <HAL_TIM_MspPostInit>

}
 8000822:	bf00      	nop
 8000824:	3758      	adds	r7, #88	; 0x58
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000084 	.word	0x20000084
 8000830:	40010000 	.word	0x40010000

08000834 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08c      	sub	sp, #48	; 0x30
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	2224      	movs	r2, #36	; 0x24
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f003 fc33 	bl	80040ae <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000850:	4b20      	ldr	r3, [pc, #128]	; (80008d4 <MX_TIM3_Init+0xa0>)
 8000852:	4a21      	ldr	r2, [pc, #132]	; (80008d8 <MX_TIM3_Init+0xa4>)
 8000854:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000856:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <MX_TIM3_Init+0xa0>)
 8000858:	2200      	movs	r2, #0
 800085a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085c:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <MX_TIM3_Init+0xa0>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000862:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <MX_TIM3_Init+0xa0>)
 8000864:	2264      	movs	r2, #100	; 0x64
 8000866:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000868:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_TIM3_Init+0xa0>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800086e:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <MX_TIM3_Init+0xa0>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000874:	2303      	movs	r3, #3
 8000876:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800087c:	2301      	movs	r3, #1
 800087e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000888:	2300      	movs	r3, #0
 800088a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800088c:	2301      	movs	r3, #1
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	4619      	mov	r1, r3
 800089e:	480d      	ldr	r0, [pc, #52]	; (80008d4 <MX_TIM3_Init+0xa0>)
 80008a0:	f001 fc42 	bl	8002128 <HAL_TIM_Encoder_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80008aa:	f000 f85b 	bl	8000964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	4619      	mov	r1, r3
 80008ba:	4806      	ldr	r0, [pc, #24]	; (80008d4 <MX_TIM3_Init+0xa0>)
 80008bc:	f002 f9ca 	bl	8002c54 <HAL_TIMEx_MasterConfigSynchronization>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80008c6:	f000 f84d 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	3730      	adds	r7, #48	; 0x30
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200000cc 	.word	0x200000cc
 80008d8:	40000400 	.word	0x40000400

080008dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_USART2_UART_Init+0x4c>)
 80008e2:	4a12      	ldr	r2, [pc, #72]	; (800092c <MX_USART2_UART_Init+0x50>)
 80008e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <MX_USART2_UART_Init+0x4c>)
 80008e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_USART2_UART_Init+0x4c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_USART2_UART_Init+0x4c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <MX_USART2_UART_Init+0x4c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_USART2_UART_Init+0x4c>)
 8000902:	220c      	movs	r2, #12
 8000904:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <MX_USART2_UART_Init+0x4c>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_USART2_UART_Init+0x4c>)
 800090e:	2200      	movs	r2, #0
 8000910:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_USART2_UART_Init+0x4c>)
 8000914:	f002 fa5e 	bl	8002dd4 <HAL_UART_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800091e:	f000 f821 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000114 	.word	0x20000114
 800092c:	40004400 	.word	0x40004400

08000930 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_GPIO_Init+0x30>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a08      	ldr	r2, [pc, #32]	; (8000960 <MX_GPIO_Init+0x30>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_GPIO_Init+0x30>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000968:	b672      	cpsid	i
}
 800096a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1){
 800096c:	e7fe      	b.n	800096c <Error_Handler+0x8>
	...

08000970 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <HAL_MspInit+0x4c>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	4a0f      	ldr	r2, [pc, #60]	; (80009bc <HAL_MspInit+0x4c>)
 8000980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000984:	6453      	str	r3, [r2, #68]	; 0x44
 8000986:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <HAL_MspInit+0x4c>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <HAL_MspInit+0x4c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	4a08      	ldr	r2, [pc, #32]	; (80009bc <HAL_MspInit+0x4c>)
 800099c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a0:	6413      	str	r3, [r2, #64]	; 0x40
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <HAL_MspInit+0x4c>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800

080009c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a0b      	ldr	r2, [pc, #44]	; (80009fc <HAL_TIM_Base_MspInit+0x3c>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d10d      	bne.n	80009ee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <HAL_TIM_Base_MspInit+0x40>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009da:	4a09      	ldr	r2, [pc, #36]	; (8000a00 <HAL_TIM_Base_MspInit+0x40>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6453      	str	r3, [r2, #68]	; 0x44
 80009e2:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <HAL_TIM_Base_MspInit+0x40>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80009ee:	bf00      	nop
 80009f0:	3714      	adds	r7, #20
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	40010000 	.word	0x40010000
 8000a00:	40023800 	.word	0x40023800

08000a04 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	; 0x28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a19      	ldr	r2, [pc, #100]	; (8000a88 <HAL_TIM_Encoder_MspInit+0x84>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d12b      	bne.n	8000a7e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <HAL_TIM_Encoder_MspInit+0x88>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	4a17      	ldr	r2, [pc, #92]	; (8000a8c <HAL_TIM_Encoder_MspInit+0x88>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	6413      	str	r3, [r2, #64]	; 0x40
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <HAL_TIM_Encoder_MspInit+0x88>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <HAL_TIM_Encoder_MspInit+0x88>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a10      	ldr	r2, [pc, #64]	; (8000a8c <HAL_TIM_Encoder_MspInit+0x88>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <HAL_TIM_Encoder_MspInit+0x88>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a5e:	23c0      	movs	r3, #192	; 0xc0
 8000a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4619      	mov	r1, r3
 8000a78:	4805      	ldr	r0, [pc, #20]	; (8000a90 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000a7a:	f000 fc21 	bl	80012c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a7e:	bf00      	nop
 8000a80:	3728      	adds	r7, #40	; 0x28
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40000400 	.word	0x40000400
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020000 	.word	0x40020000

08000a94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b088      	sub	sp, #32
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a12      	ldr	r2, [pc, #72]	; (8000afc <HAL_TIM_MspPostInit+0x68>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d11e      	bne.n	8000af4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <HAL_TIM_MspPostInit+0x6c>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a10      	ldr	r2, [pc, #64]	; (8000b00 <HAL_TIM_MspPostInit+0x6c>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <HAL_TIM_MspPostInit+0x6c>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = servo_Pin;
 8000ad2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ad6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(servo_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	4619      	mov	r1, r3
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <HAL_TIM_MspPostInit+0x70>)
 8000af0:	f000 fbe6 	bl	80012c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000af4:	bf00      	nop
 8000af6:	3720      	adds	r7, #32
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40010000 	.word	0x40010000
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40020000 	.word	0x40020000

08000b08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	; 0x28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a1d      	ldr	r2, [pc, #116]	; (8000b9c <HAL_UART_MspInit+0x94>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d133      	bne.n	8000b92 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <HAL_UART_MspInit+0x98>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	4a1b      	ldr	r2, [pc, #108]	; (8000ba0 <HAL_UART_MspInit+0x98>)
 8000b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b38:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3a:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <HAL_UART_MspInit+0x98>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <HAL_UART_MspInit+0x98>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a14      	ldr	r2, [pc, #80]	; (8000ba0 <HAL_UART_MspInit+0x98>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_UART_MspInit+0x98>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b62:	230c      	movs	r3, #12
 8000b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b72:	2307      	movs	r3, #7
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4809      	ldr	r0, [pc, #36]	; (8000ba4 <HAL_UART_MspInit+0x9c>)
 8000b7e:	f000 fb9f 	bl	80012c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2100      	movs	r1, #0
 8000b86:	2026      	movs	r0, #38	; 0x26
 8000b88:	f000 fad1 	bl	800112e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b8c:	2026      	movs	r0, #38	; 0x26
 8000b8e:	f000 faea 	bl	8001166 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b92:	bf00      	nop
 8000b94:	3728      	adds	r7, #40	; 0x28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40004400 	.word	0x40004400
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020000 	.word	0x40020000

08000ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bac:	e7fe      	b.n	8000bac <NMI_Handler+0x4>

08000bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <HardFault_Handler+0x4>

08000bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <MemManage_Handler+0x4>

08000bba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <BusFault_Handler+0x4>

08000bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <UsageFault_Handler+0x4>

08000bc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf4:	f000 f97c 	bl	8000ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c00:	4802      	ldr	r0, [pc, #8]	; (8000c0c <USART2_IRQHandler+0x10>)
 8000c02:	f002 f9e7 	bl	8002fd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000114 	.word	0x20000114

08000c10 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	e00a      	b.n	8000c38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c22:	f3af 8000 	nop.w
 8000c26:	4601      	mov	r1, r0
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	1c5a      	adds	r2, r3, #1
 8000c2c:	60ba      	str	r2, [r7, #8]
 8000c2e:	b2ca      	uxtb	r2, r1
 8000c30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	3301      	adds	r3, #1
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	697a      	ldr	r2, [r7, #20]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	dbf0      	blt.n	8000c22 <_read+0x12>
  }

  return len;
 8000c40:	687b      	ldr	r3, [r7, #4]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b083      	sub	sp, #12
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c62:	b480      	push	{r7}
 8000c64:	b083      	sub	sp, #12
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
 8000c6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c72:	605a      	str	r2, [r3, #4]
  return 0;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <_isatty>:

int _isatty(int file)
{
 8000c82:	b480      	push	{r7}
 8000c84:	b083      	sub	sp, #12
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c8a:	2301      	movs	r3, #1
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3714      	adds	r7, #20
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
	...

08000cb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cbc:	4a14      	ldr	r2, [pc, #80]	; (8000d10 <_sbrk+0x5c>)
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <_sbrk+0x60>)
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc8:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <_sbrk+0x64>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d102      	bne.n	8000cd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <_sbrk+0x64>)
 8000cd2:	4a12      	ldr	r2, [pc, #72]	; (8000d1c <_sbrk+0x68>)
 8000cd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <_sbrk+0x64>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4413      	add	r3, r2
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d207      	bcs.n	8000cf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ce4:	f003 fa32 	bl	800414c <__errno>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	220c      	movs	r2, #12
 8000cec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cee:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf2:	e009      	b.n	8000d08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cfa:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <_sbrk+0x64>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	4a05      	ldr	r2, [pc, #20]	; (8000d18 <_sbrk+0x64>)
 8000d04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d06:	68fb      	ldr	r3, [r7, #12]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20020000 	.word	0x20020000
 8000d14:	00000400 	.word	0x00000400
 8000d18:	2000015c 	.word	0x2000015c
 8000d1c:	200003b8 	.word	0x200003b8

08000d20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <SystemInit+0x20>)
 8000d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d2a:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <SystemInit+0x20>)
 8000d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <initUart>:
int rxBufferPp;					// put pointer (write)
uint8_t rxBuffer[rxBufferMax];
uint8_t rxChar;

// uart device reset (uart   jang chi   cho gi hwa)
void initUart(UART_HandleTypeDef *inHuart) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	huart= inHuart;
 8000d4c:	4a06      	ldr	r2, [pc, #24]	; (8000d68 <initUart+0x24>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(huart, &rxChar, 1);
 8000d52:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <initUart+0x24>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2201      	movs	r2, #1
 8000d58:	4904      	ldr	r1, [pc, #16]	; (8000d6c <initUart+0x28>)
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f002 f915 	bl	8002f8a <HAL_UART_Receive_IT>
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000160 	.word	0x20000160
 8000d6c:	20000267 	.word	0x20000267

08000d70 <HAL_UART_RxCpltCallback>:

// message recieve process(mun ja   chu ri   gwa jung)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	rxBuffer[rxBufferPp++] = rxChar;
 8000d78:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <HAL_UART_RxCpltCallback+0x4c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	1c5a      	adds	r2, r3, #1
 8000d7e:	490f      	ldr	r1, [pc, #60]	; (8000dbc <HAL_UART_RxCpltCallback+0x4c>)
 8000d80:	600a      	str	r2, [r1, #0]
 8000d82:	4a0f      	ldr	r2, [pc, #60]	; (8000dc0 <HAL_UART_RxCpltCallback+0x50>)
 8000d84:	7811      	ldrb	r1, [r2, #0]
 8000d86:	4a0f      	ldr	r2, [pc, #60]	; (8000dc4 <HAL_UART_RxCpltCallback+0x54>)
 8000d88:	54d1      	strb	r1, [r2, r3]
	rxBufferPp %= rxBufferMax;
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <HAL_UART_RxCpltCallback+0x4c>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <HAL_UART_RxCpltCallback+0x58>)
 8000d90:	fb83 1302 	smull	r1, r3, r3, r2
 8000d94:	4413      	add	r3, r2
 8000d96:	11d9      	asrs	r1, r3, #7
 8000d98:	17d3      	asrs	r3, r2, #31
 8000d9a:	1ac9      	subs	r1, r1, r3
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	021b      	lsls	r3, r3, #8
 8000da0:	1a5b      	subs	r3, r3, r1
 8000da2:	1ad1      	subs	r1, r2, r3
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <HAL_UART_RxCpltCallback+0x4c>)
 8000da6:	6019      	str	r1, [r3, #0]
	HAL_UART_Receive_IT(huart, &rxChar, 1);//interrupt always reset
 8000da8:	2201      	movs	r2, #1
 8000daa:	4905      	ldr	r1, [pc, #20]	; (8000dc0 <HAL_UART_RxCpltCallback+0x50>)
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f002 f8ec 	bl	8002f8a <HAL_UART_Receive_IT>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000164 	.word	0x20000164
 8000dc0:	20000267 	.word	0x20000267
 8000dc4:	20000168 	.word	0x20000168
 8000dc8:	80808081 	.word	0x80808081

08000dcc <_write>:
	result = rxBuffer[rxBufferGp++];
	rxBufferGp %= rxBufferMax;
	return result;
}

int _write(int file, char *p, int len) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(huart, p, len, 1);
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <_write+0x28>)
 8000dda:	6818      	ldr	r0, [r3, #0]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	2301      	movs	r3, #1
 8000de2:	68b9      	ldr	r1, [r7, #8]
 8000de4:	f002 f846 	bl	8002e74 <HAL_UART_Transmit>
	return len;
 8000de8:	687b      	ldr	r3, [r7, #4]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000160 	.word	0x20000160

08000df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000df8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e30 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dfc:	f7ff ff90 	bl	8000d20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e00:	480c      	ldr	r0, [pc, #48]	; (8000e34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e02:	490d      	ldr	r1, [pc, #52]	; (8000e38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e04:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e08:	e002      	b.n	8000e10 <LoopCopyDataInit>

08000e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0e:	3304      	adds	r3, #4

08000e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e14:	d3f9      	bcc.n	8000e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e16:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e18:	4c0a      	ldr	r4, [pc, #40]	; (8000e44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e1c:	e001      	b.n	8000e22 <LoopFillZerobss>

08000e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e20:	3204      	adds	r2, #4

08000e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e24:	d3fb      	bcc.n	8000e1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e26:	f003 f997 	bl	8004158 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e2a:	f7ff fbc3 	bl	80005b4 <main>
  bx  lr    
 8000e2e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e38:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e3c:	08004d68 	.word	0x08004d68
  ldr r2, =_sbss
 8000e40:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e44:	200003b8 	.word	0x200003b8

08000e48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e48:	e7fe      	b.n	8000e48 <ADC_IRQHandler>
	...

08000e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e50:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0d      	ldr	r2, [pc, #52]	; (8000e8c <HAL_Init+0x40>)
 8000e56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <HAL_Init+0x40>)
 8000e62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <HAL_Init+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a07      	ldr	r2, [pc, #28]	; (8000e8c <HAL_Init+0x40>)
 8000e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e74:	2003      	movs	r0, #3
 8000e76:	f000 f94f 	bl	8001118 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e7a:	200f      	movs	r0, #15
 8000e7c:	f000 f808 	bl	8000e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e80:	f7ff fd76 	bl	8000970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40023c00 	.word	0x40023c00

08000e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_InitTick+0x54>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_InitTick+0x58>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 f967 	bl	8001182 <HAL_SYSTICK_Config>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00e      	b.n	8000edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b0f      	cmp	r3, #15
 8000ec2:	d80a      	bhi.n	8000eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f000 f92f 	bl	800112e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed0:	4a06      	ldr	r2, [pc, #24]	; (8000eec <HAL_InitTick+0x5c>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	e000      	b.n	8000edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	20000004 	.word	0x20000004

08000ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_IncTick+0x20>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_IncTick+0x24>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <HAL_IncTick+0x24>)
 8000f02:	6013      	str	r3, [r2, #0]
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000008 	.word	0x20000008
 8000f14:	20000268 	.word	0x20000268

08000f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <HAL_GetTick+0x14>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20000268 	.word	0x20000268

08000f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f38:	f7ff ffee 	bl	8000f18 <HAL_GetTick>
 8000f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f48:	d005      	beq.n	8000f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <HAL_Delay+0x44>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4413      	add	r3, r2
 8000f54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f56:	bf00      	nop
 8000f58:	f7ff ffde 	bl	8000f18 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d8f7      	bhi.n	8000f58 <HAL_Delay+0x28>
  {
  }
}
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000008 	.word	0x20000008

08000f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f94:	4013      	ands	r3, r2
 8000f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000faa:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	60d3      	str	r3, [r2, #12]
}
 8000fb0:	bf00      	nop
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	f003 0307 	and.w	r3, r3, #7
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	db0b      	blt.n	8001006 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	f003 021f 	and.w	r2, r3, #31
 8000ff4:	4907      	ldr	r1, [pc, #28]	; (8001014 <__NVIC_EnableIRQ+0x38>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	095b      	lsrs	r3, r3, #5
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8001002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000e100 	.word	0xe000e100

08001018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	6039      	str	r1, [r7, #0]
 8001022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001028:	2b00      	cmp	r3, #0
 800102a:	db0a      	blt.n	8001042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	b2da      	uxtb	r2, r3
 8001030:	490c      	ldr	r1, [pc, #48]	; (8001064 <__NVIC_SetPriority+0x4c>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	0112      	lsls	r2, r2, #4
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	440b      	add	r3, r1
 800103c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001040:	e00a      	b.n	8001058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4908      	ldr	r1, [pc, #32]	; (8001068 <__NVIC_SetPriority+0x50>)
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	f003 030f 	and.w	r3, r3, #15
 800104e:	3b04      	subs	r3, #4
 8001050:	0112      	lsls	r2, r2, #4
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	440b      	add	r3, r1
 8001056:	761a      	strb	r2, [r3, #24]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000e100 	.word	0xe000e100
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800106c:	b480      	push	{r7}
 800106e:	b089      	sub	sp, #36	; 0x24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f1c3 0307 	rsb	r3, r3, #7
 8001086:	2b04      	cmp	r3, #4
 8001088:	bf28      	it	cs
 800108a:	2304      	movcs	r3, #4
 800108c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3304      	adds	r3, #4
 8001092:	2b06      	cmp	r3, #6
 8001094:	d902      	bls.n	800109c <NVIC_EncodePriority+0x30>
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3b03      	subs	r3, #3
 800109a:	e000      	b.n	800109e <NVIC_EncodePriority+0x32>
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	f04f 32ff 	mov.w	r2, #4294967295
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43da      	mvns	r2, r3
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	401a      	ands	r2, r3
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b4:	f04f 31ff 	mov.w	r1, #4294967295
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa01 f303 	lsl.w	r3, r1, r3
 80010be:	43d9      	mvns	r1, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	4313      	orrs	r3, r2
         );
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3724      	adds	r7, #36	; 0x24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e4:	d301      	bcc.n	80010ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e6:	2301      	movs	r3, #1
 80010e8:	e00f      	b.n	800110a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <SysTick_Config+0x40>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f2:	210f      	movs	r1, #15
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	f7ff ff8e 	bl	8001018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <SysTick_Config+0x40>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001102:	4b04      	ldr	r3, [pc, #16]	; (8001114 <SysTick_Config+0x40>)
 8001104:	2207      	movs	r2, #7
 8001106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	e000e010 	.word	0xe000e010

08001118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff29 	bl	8000f78 <__NVIC_SetPriorityGrouping>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800112e:	b580      	push	{r7, lr}
 8001130:	b086      	sub	sp, #24
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
 800113a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001140:	f7ff ff3e 	bl	8000fc0 <__NVIC_GetPriorityGrouping>
 8001144:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	68b9      	ldr	r1, [r7, #8]
 800114a:	6978      	ldr	r0, [r7, #20]
 800114c:	f7ff ff8e 	bl	800106c <NVIC_EncodePriority>
 8001150:	4602      	mov	r2, r0
 8001152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001156:	4611      	mov	r1, r2
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff5d 	bl	8001018 <__NVIC_SetPriority>
}
 800115e:	bf00      	nop
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	4603      	mov	r3, r0
 800116e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff ff31 	bl	8000fdc <__NVIC_EnableIRQ>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ffa2 	bl	80010d4 <SysTick_Config>
 8001190:	4603      	mov	r3, r0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b084      	sub	sp, #16
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011a8:	f7ff feb6 	bl	8000f18 <HAL_GetTick>
 80011ac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d008      	beq.n	80011cc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2280      	movs	r2, #128	; 0x80
 80011be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e052      	b.n	8001272 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f022 0216 	bic.w	r2, r2, #22
 80011da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	695a      	ldr	r2, [r3, #20]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011ea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d103      	bne.n	80011fc <HAL_DMA_Abort+0x62>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d007      	beq.n	800120c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f022 0208 	bic.w	r2, r2, #8
 800120a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f022 0201 	bic.w	r2, r2, #1
 800121a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800121c:	e013      	b.n	8001246 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800121e:	f7ff fe7b 	bl	8000f18 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b05      	cmp	r3, #5
 800122a:	d90c      	bls.n	8001246 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2220      	movs	r2, #32
 8001230:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2203      	movs	r2, #3
 8001236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e015      	b.n	8001272 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1e4      	bne.n	800121e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001258:	223f      	movs	r2, #63	; 0x3f
 800125a:	409a      	lsls	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2201      	movs	r2, #1
 8001264:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d004      	beq.n	8001298 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2280      	movs	r2, #128	; 0x80
 8001292:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e00c      	b.n	80012b2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2205      	movs	r2, #5
 800129c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f022 0201 	bic.w	r2, r2, #1
 80012ae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
	...

080012c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b089      	sub	sp, #36	; 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
 80012da:	e159      	b.n	8001590 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012dc:	2201      	movs	r2, #1
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	4013      	ands	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	f040 8148 	bne.w	800158a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f003 0303 	and.w	r3, r3, #3
 8001302:	2b01      	cmp	r3, #1
 8001304:	d005      	beq.n	8001312 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800130e:	2b02      	cmp	r3, #2
 8001310:	d130      	bne.n	8001374 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	2203      	movs	r2, #3
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	68da      	ldr	r2, [r3, #12]
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001348:	2201      	movs	r2, #1
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	091b      	lsrs	r3, r3, #4
 800135e:	f003 0201 	and.w	r2, r3, #1
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 0303 	and.w	r3, r3, #3
 800137c:	2b03      	cmp	r3, #3
 800137e:	d017      	beq.n	80013b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	2203      	movs	r2, #3
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d123      	bne.n	8001404 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	08da      	lsrs	r2, r3, #3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3208      	adds	r2, #8
 80013c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	f003 0307 	and.w	r3, r3, #7
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	220f      	movs	r2, #15
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	691a      	ldr	r2, [r3, #16]
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	08da      	lsrs	r2, r3, #3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3208      	adds	r2, #8
 80013fe:	69b9      	ldr	r1, [r7, #24]
 8001400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	2203      	movs	r2, #3
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 0203 	and.w	r2, r3, #3
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001440:	2b00      	cmp	r3, #0
 8001442:	f000 80a2 	beq.w	800158a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	4b57      	ldr	r3, [pc, #348]	; (80015a8 <HAL_GPIO_Init+0x2e8>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	4a56      	ldr	r2, [pc, #344]	; (80015a8 <HAL_GPIO_Init+0x2e8>)
 8001450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001454:	6453      	str	r3, [r2, #68]	; 0x44
 8001456:	4b54      	ldr	r3, [pc, #336]	; (80015a8 <HAL_GPIO_Init+0x2e8>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001462:	4a52      	ldr	r2, [pc, #328]	; (80015ac <HAL_GPIO_Init+0x2ec>)
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	089b      	lsrs	r3, r3, #2
 8001468:	3302      	adds	r3, #2
 800146a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	220f      	movs	r2, #15
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a49      	ldr	r2, [pc, #292]	; (80015b0 <HAL_GPIO_Init+0x2f0>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d019      	beq.n	80014c2 <HAL_GPIO_Init+0x202>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a48      	ldr	r2, [pc, #288]	; (80015b4 <HAL_GPIO_Init+0x2f4>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d013      	beq.n	80014be <HAL_GPIO_Init+0x1fe>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a47      	ldr	r2, [pc, #284]	; (80015b8 <HAL_GPIO_Init+0x2f8>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d00d      	beq.n	80014ba <HAL_GPIO_Init+0x1fa>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a46      	ldr	r2, [pc, #280]	; (80015bc <HAL_GPIO_Init+0x2fc>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d007      	beq.n	80014b6 <HAL_GPIO_Init+0x1f6>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a45      	ldr	r2, [pc, #276]	; (80015c0 <HAL_GPIO_Init+0x300>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d101      	bne.n	80014b2 <HAL_GPIO_Init+0x1f2>
 80014ae:	2304      	movs	r3, #4
 80014b0:	e008      	b.n	80014c4 <HAL_GPIO_Init+0x204>
 80014b2:	2307      	movs	r3, #7
 80014b4:	e006      	b.n	80014c4 <HAL_GPIO_Init+0x204>
 80014b6:	2303      	movs	r3, #3
 80014b8:	e004      	b.n	80014c4 <HAL_GPIO_Init+0x204>
 80014ba:	2302      	movs	r3, #2
 80014bc:	e002      	b.n	80014c4 <HAL_GPIO_Init+0x204>
 80014be:	2301      	movs	r3, #1
 80014c0:	e000      	b.n	80014c4 <HAL_GPIO_Init+0x204>
 80014c2:	2300      	movs	r3, #0
 80014c4:	69fa      	ldr	r2, [r7, #28]
 80014c6:	f002 0203 	and.w	r2, r2, #3
 80014ca:	0092      	lsls	r2, r2, #2
 80014cc:	4093      	lsls	r3, r2
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014d4:	4935      	ldr	r1, [pc, #212]	; (80015ac <HAL_GPIO_Init+0x2ec>)
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	089b      	lsrs	r3, r3, #2
 80014da:	3302      	adds	r3, #2
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014e2:	4b38      	ldr	r3, [pc, #224]	; (80015c4 <HAL_GPIO_Init+0x304>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4013      	ands	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001506:	4a2f      	ldr	r2, [pc, #188]	; (80015c4 <HAL_GPIO_Init+0x304>)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800150c:	4b2d      	ldr	r3, [pc, #180]	; (80015c4 <HAL_GPIO_Init+0x304>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001530:	4a24      	ldr	r2, [pc, #144]	; (80015c4 <HAL_GPIO_Init+0x304>)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001536:	4b23      	ldr	r3, [pc, #140]	; (80015c4 <HAL_GPIO_Init+0x304>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	43db      	mvns	r3, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4013      	ands	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800155a:	4a1a      	ldr	r2, [pc, #104]	; (80015c4 <HAL_GPIO_Init+0x304>)
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001560:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <HAL_GPIO_Init+0x304>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001584:	4a0f      	ldr	r2, [pc, #60]	; (80015c4 <HAL_GPIO_Init+0x304>)
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3301      	adds	r3, #1
 800158e:	61fb      	str	r3, [r7, #28]
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	2b0f      	cmp	r3, #15
 8001594:	f67f aea2 	bls.w	80012dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	3724      	adds	r7, #36	; 0x24
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40013800 	.word	0x40013800
 80015b0:	40020000 	.word	0x40020000
 80015b4:	40020400 	.word	0x40020400
 80015b8:	40020800 	.word	0x40020800
 80015bc:	40020c00 	.word	0x40020c00
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40013c00 	.word	0x40013c00

080015c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e267      	b.n	8001aaa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d075      	beq.n	80016d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015e6:	4b88      	ldr	r3, [pc, #544]	; (8001808 <HAL_RCC_OscConfig+0x240>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 030c 	and.w	r3, r3, #12
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	d00c      	beq.n	800160c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015f2:	4b85      	ldr	r3, [pc, #532]	; (8001808 <HAL_RCC_OscConfig+0x240>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d112      	bne.n	8001624 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015fe:	4b82      	ldr	r3, [pc, #520]	; (8001808 <HAL_RCC_OscConfig+0x240>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001606:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800160a:	d10b      	bne.n	8001624 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800160c:	4b7e      	ldr	r3, [pc, #504]	; (8001808 <HAL_RCC_OscConfig+0x240>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d05b      	beq.n	80016d0 <HAL_RCC_OscConfig+0x108>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d157      	bne.n	80016d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e242      	b.n	8001aaa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800162c:	d106      	bne.n	800163c <HAL_RCC_OscConfig+0x74>
 800162e:	4b76      	ldr	r3, [pc, #472]	; (8001808 <HAL_RCC_OscConfig+0x240>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a75      	ldr	r2, [pc, #468]	; (8001808 <HAL_RCC_OscConfig+0x240>)
 8001634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	e01d      	b.n	8001678 <HAL_RCC_OscConfig+0xb0>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001644:	d10c      	bne.n	8001660 <HAL_RCC_OscConfig+0x98>
 8001646:	4b70      	ldr	r3, [pc, #448]	; (8001808 <HAL_RCC_OscConfig+0x240>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a6f      	ldr	r2, [pc, #444]	; (8001808 <HAL_RCC_OscConfig+0x240>)
 800164c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	4b6d      	ldr	r3, [pc, #436]	; (8001808 <HAL_RCC_OscConfig+0x240>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a6c      	ldr	r2, [pc, #432]	; (8001808 <HAL_RCC_OscConfig+0x240>)
 8001658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	e00b      	b.n	8001678 <HAL_RCC_OscConfig+0xb0>
 8001660:	4b69      	ldr	r3, [pc, #420]	; (8001808 <HAL_RCC_OscConfig+0x240>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a68      	ldr	r2, [pc, #416]	; (8001808 <HAL_RCC_OscConfig+0x240>)
 8001666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	4b66      	ldr	r3, [pc, #408]	; (8001808 <HAL_RCC_OscConfig+0x240>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a65      	ldr	r2, [pc, #404]	; (8001808 <HAL_RCC_OscConfig+0x240>)
 8001672:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001676:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d013      	beq.n	80016a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff fc4a 	bl	8000f18 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001688:	f7ff fc46 	bl	8000f18 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b64      	cmp	r3, #100	; 0x64
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e207      	b.n	8001aaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169a:	4b5b      	ldr	r3, [pc, #364]	; (8001808 <HAL_RCC_OscConfig+0x240>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0f0      	beq.n	8001688 <HAL_RCC_OscConfig+0xc0>
 80016a6:	e014      	b.n	80016d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a8:	f7ff fc36 	bl	8000f18 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016b0:	f7ff fc32 	bl	8000f18 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b64      	cmp	r3, #100	; 0x64
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e1f3      	b.n	8001aaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c2:	4b51      	ldr	r3, [pc, #324]	; (8001808 <HAL_RCC_OscConfig+0x240>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f0      	bne.n	80016b0 <HAL_RCC_OscConfig+0xe8>
 80016ce:	e000      	b.n	80016d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d063      	beq.n	80017a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016de:	4b4a      	ldr	r3, [pc, #296]	; (8001808 <HAL_RCC_OscConfig+0x240>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f003 030c 	and.w	r3, r3, #12
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d00b      	beq.n	8001702 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ea:	4b47      	ldr	r3, [pc, #284]	; (8001808 <HAL_RCC_OscConfig+0x240>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016f2:	2b08      	cmp	r3, #8
 80016f4:	d11c      	bne.n	8001730 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016f6:	4b44      	ldr	r3, [pc, #272]	; (8001808 <HAL_RCC_OscConfig+0x240>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d116      	bne.n	8001730 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001702:	4b41      	ldr	r3, [pc, #260]	; (8001808 <HAL_RCC_OscConfig+0x240>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d005      	beq.n	800171a <HAL_RCC_OscConfig+0x152>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d001      	beq.n	800171a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e1c7      	b.n	8001aaa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171a:	4b3b      	ldr	r3, [pc, #236]	; (8001808 <HAL_RCC_OscConfig+0x240>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	4937      	ldr	r1, [pc, #220]	; (8001808 <HAL_RCC_OscConfig+0x240>)
 800172a:	4313      	orrs	r3, r2
 800172c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800172e:	e03a      	b.n	80017a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d020      	beq.n	800177a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001738:	4b34      	ldr	r3, [pc, #208]	; (800180c <HAL_RCC_OscConfig+0x244>)
 800173a:	2201      	movs	r2, #1
 800173c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173e:	f7ff fbeb 	bl	8000f18 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001746:	f7ff fbe7 	bl	8000f18 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e1a8      	b.n	8001aaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001758:	4b2b      	ldr	r3, [pc, #172]	; (8001808 <HAL_RCC_OscConfig+0x240>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0f0      	beq.n	8001746 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001764:	4b28      	ldr	r3, [pc, #160]	; (8001808 <HAL_RCC_OscConfig+0x240>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	4925      	ldr	r1, [pc, #148]	; (8001808 <HAL_RCC_OscConfig+0x240>)
 8001774:	4313      	orrs	r3, r2
 8001776:	600b      	str	r3, [r1, #0]
 8001778:	e015      	b.n	80017a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800177a:	4b24      	ldr	r3, [pc, #144]	; (800180c <HAL_RCC_OscConfig+0x244>)
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001780:	f7ff fbca 	bl	8000f18 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001788:	f7ff fbc6 	bl	8000f18 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e187      	b.n	8001aaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800179a:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <HAL_RCC_OscConfig+0x240>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1f0      	bne.n	8001788 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d036      	beq.n	8001820 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d016      	beq.n	80017e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <HAL_RCC_OscConfig+0x248>)
 80017bc:	2201      	movs	r2, #1
 80017be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c0:	f7ff fbaa 	bl	8000f18 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017c8:	f7ff fba6 	bl	8000f18 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e167      	b.n	8001aaa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <HAL_RCC_OscConfig+0x240>)
 80017dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0x200>
 80017e6:	e01b      	b.n	8001820 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <HAL_RCC_OscConfig+0x248>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ee:	f7ff fb93 	bl	8000f18 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f4:	e00e      	b.n	8001814 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017f6:	f7ff fb8f 	bl	8000f18 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d907      	bls.n	8001814 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e150      	b.n	8001aaa <HAL_RCC_OscConfig+0x4e2>
 8001808:	40023800 	.word	0x40023800
 800180c:	42470000 	.word	0x42470000
 8001810:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001814:	4b88      	ldr	r3, [pc, #544]	; (8001a38 <HAL_RCC_OscConfig+0x470>)
 8001816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1ea      	bne.n	80017f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 8097 	beq.w	800195c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800182e:	2300      	movs	r3, #0
 8001830:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001832:	4b81      	ldr	r3, [pc, #516]	; (8001a38 <HAL_RCC_OscConfig+0x470>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d10f      	bne.n	800185e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	4b7d      	ldr	r3, [pc, #500]	; (8001a38 <HAL_RCC_OscConfig+0x470>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	4a7c      	ldr	r2, [pc, #496]	; (8001a38 <HAL_RCC_OscConfig+0x470>)
 8001848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800184c:	6413      	str	r3, [r2, #64]	; 0x40
 800184e:	4b7a      	ldr	r3, [pc, #488]	; (8001a38 <HAL_RCC_OscConfig+0x470>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800185a:	2301      	movs	r3, #1
 800185c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800185e:	4b77      	ldr	r3, [pc, #476]	; (8001a3c <HAL_RCC_OscConfig+0x474>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001866:	2b00      	cmp	r3, #0
 8001868:	d118      	bne.n	800189c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800186a:	4b74      	ldr	r3, [pc, #464]	; (8001a3c <HAL_RCC_OscConfig+0x474>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a73      	ldr	r2, [pc, #460]	; (8001a3c <HAL_RCC_OscConfig+0x474>)
 8001870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001874:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001876:	f7ff fb4f 	bl	8000f18 <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800187e:	f7ff fb4b 	bl	8000f18 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e10c      	b.n	8001aaa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001890:	4b6a      	ldr	r3, [pc, #424]	; (8001a3c <HAL_RCC_OscConfig+0x474>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0f0      	beq.n	800187e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d106      	bne.n	80018b2 <HAL_RCC_OscConfig+0x2ea>
 80018a4:	4b64      	ldr	r3, [pc, #400]	; (8001a38 <HAL_RCC_OscConfig+0x470>)
 80018a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a8:	4a63      	ldr	r2, [pc, #396]	; (8001a38 <HAL_RCC_OscConfig+0x470>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	6713      	str	r3, [r2, #112]	; 0x70
 80018b0:	e01c      	b.n	80018ec <HAL_RCC_OscConfig+0x324>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	2b05      	cmp	r3, #5
 80018b8:	d10c      	bne.n	80018d4 <HAL_RCC_OscConfig+0x30c>
 80018ba:	4b5f      	ldr	r3, [pc, #380]	; (8001a38 <HAL_RCC_OscConfig+0x470>)
 80018bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018be:	4a5e      	ldr	r2, [pc, #376]	; (8001a38 <HAL_RCC_OscConfig+0x470>)
 80018c0:	f043 0304 	orr.w	r3, r3, #4
 80018c4:	6713      	str	r3, [r2, #112]	; 0x70
 80018c6:	4b5c      	ldr	r3, [pc, #368]	; (8001a38 <HAL_RCC_OscConfig+0x470>)
 80018c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ca:	4a5b      	ldr	r2, [pc, #364]	; (8001a38 <HAL_RCC_OscConfig+0x470>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6713      	str	r3, [r2, #112]	; 0x70
 80018d2:	e00b      	b.n	80018ec <HAL_RCC_OscConfig+0x324>
 80018d4:	4b58      	ldr	r3, [pc, #352]	; (8001a38 <HAL_RCC_OscConfig+0x470>)
 80018d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d8:	4a57      	ldr	r2, [pc, #348]	; (8001a38 <HAL_RCC_OscConfig+0x470>)
 80018da:	f023 0301 	bic.w	r3, r3, #1
 80018de:	6713      	str	r3, [r2, #112]	; 0x70
 80018e0:	4b55      	ldr	r3, [pc, #340]	; (8001a38 <HAL_RCC_OscConfig+0x470>)
 80018e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e4:	4a54      	ldr	r2, [pc, #336]	; (8001a38 <HAL_RCC_OscConfig+0x470>)
 80018e6:	f023 0304 	bic.w	r3, r3, #4
 80018ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d015      	beq.n	8001920 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f4:	f7ff fb10 	bl	8000f18 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018fa:	e00a      	b.n	8001912 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018fc:	f7ff fb0c 	bl	8000f18 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	f241 3288 	movw	r2, #5000	; 0x1388
 800190a:	4293      	cmp	r3, r2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e0cb      	b.n	8001aaa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001912:	4b49      	ldr	r3, [pc, #292]	; (8001a38 <HAL_RCC_OscConfig+0x470>)
 8001914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0ee      	beq.n	80018fc <HAL_RCC_OscConfig+0x334>
 800191e:	e014      	b.n	800194a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001920:	f7ff fafa 	bl	8000f18 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001926:	e00a      	b.n	800193e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001928:	f7ff faf6 	bl	8000f18 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	f241 3288 	movw	r2, #5000	; 0x1388
 8001936:	4293      	cmp	r3, r2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e0b5      	b.n	8001aaa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800193e:	4b3e      	ldr	r3, [pc, #248]	; (8001a38 <HAL_RCC_OscConfig+0x470>)
 8001940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1ee      	bne.n	8001928 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800194a:	7dfb      	ldrb	r3, [r7, #23]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d105      	bne.n	800195c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001950:	4b39      	ldr	r3, [pc, #228]	; (8001a38 <HAL_RCC_OscConfig+0x470>)
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	4a38      	ldr	r2, [pc, #224]	; (8001a38 <HAL_RCC_OscConfig+0x470>)
 8001956:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800195a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	2b00      	cmp	r3, #0
 8001962:	f000 80a1 	beq.w	8001aa8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001966:	4b34      	ldr	r3, [pc, #208]	; (8001a38 <HAL_RCC_OscConfig+0x470>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 030c 	and.w	r3, r3, #12
 800196e:	2b08      	cmp	r3, #8
 8001970:	d05c      	beq.n	8001a2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	2b02      	cmp	r3, #2
 8001978:	d141      	bne.n	80019fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800197a:	4b31      	ldr	r3, [pc, #196]	; (8001a40 <HAL_RCC_OscConfig+0x478>)
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001980:	f7ff faca 	bl	8000f18 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001988:	f7ff fac6 	bl	8000f18 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e087      	b.n	8001aaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800199a:	4b27      	ldr	r3, [pc, #156]	; (8001a38 <HAL_RCC_OscConfig+0x470>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f0      	bne.n	8001988 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69da      	ldr	r2, [r3, #28]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b4:	019b      	lsls	r3, r3, #6
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019bc:	085b      	lsrs	r3, r3, #1
 80019be:	3b01      	subs	r3, #1
 80019c0:	041b      	lsls	r3, r3, #16
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c8:	061b      	lsls	r3, r3, #24
 80019ca:	491b      	ldr	r1, [pc, #108]	; (8001a38 <HAL_RCC_OscConfig+0x470>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019d0:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <HAL_RCC_OscConfig+0x478>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d6:	f7ff fa9f 	bl	8000f18 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019de:	f7ff fa9b 	bl	8000f18 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e05c      	b.n	8001aaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f0:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <HAL_RCC_OscConfig+0x470>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0f0      	beq.n	80019de <HAL_RCC_OscConfig+0x416>
 80019fc:	e054      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019fe:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <HAL_RCC_OscConfig+0x478>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a04:	f7ff fa88 	bl	8000f18 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a0c:	f7ff fa84 	bl	8000f18 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e045      	b.n	8001aaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <HAL_RCC_OscConfig+0x470>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x444>
 8001a2a:	e03d      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d107      	bne.n	8001a44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e038      	b.n	8001aaa <HAL_RCC_OscConfig+0x4e2>
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40007000 	.word	0x40007000
 8001a40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a44:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <HAL_RCC_OscConfig+0x4ec>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d028      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d121      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d11a      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a74:	4013      	ands	r3, r2
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d111      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8a:	085b      	lsrs	r3, r3, #1
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d107      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d001      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e000      	b.n	8001aaa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40023800 	.word	0x40023800

08001ab8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e0cc      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001acc:	4b68      	ldr	r3, [pc, #416]	; (8001c70 <HAL_RCC_ClockConfig+0x1b8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d90c      	bls.n	8001af4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ada:	4b65      	ldr	r3, [pc, #404]	; (8001c70 <HAL_RCC_ClockConfig+0x1b8>)
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae2:	4b63      	ldr	r3, [pc, #396]	; (8001c70 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d001      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e0b8      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d020      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d005      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b0c:	4b59      	ldr	r3, [pc, #356]	; (8001c74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	4a58      	ldr	r2, [pc, #352]	; (8001c74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0308 	and.w	r3, r3, #8
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d005      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b24:	4b53      	ldr	r3, [pc, #332]	; (8001c74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	4a52      	ldr	r2, [pc, #328]	; (8001c74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b30:	4b50      	ldr	r3, [pc, #320]	; (8001c74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	494d      	ldr	r1, [pc, #308]	; (8001c74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d044      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d107      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b56:	4b47      	ldr	r3, [pc, #284]	; (8001c74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d119      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e07f      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d003      	beq.n	8001b76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b72:	2b03      	cmp	r3, #3
 8001b74:	d107      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b76:	4b3f      	ldr	r3, [pc, #252]	; (8001c74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d109      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e06f      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b86:	4b3b      	ldr	r3, [pc, #236]	; (8001c74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e067      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b96:	4b37      	ldr	r3, [pc, #220]	; (8001c74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f023 0203 	bic.w	r2, r3, #3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	4934      	ldr	r1, [pc, #208]	; (8001c74 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ba8:	f7ff f9b6 	bl	8000f18 <HAL_GetTick>
 8001bac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bae:	e00a      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb0:	f7ff f9b2 	bl	8000f18 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e04f      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc6:	4b2b      	ldr	r3, [pc, #172]	; (8001c74 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 020c 	and.w	r2, r3, #12
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d1eb      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bd8:	4b25      	ldr	r3, [pc, #148]	; (8001c70 <HAL_RCC_ClockConfig+0x1b8>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d20c      	bcs.n	8001c00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be6:	4b22      	ldr	r3, [pc, #136]	; (8001c70 <HAL_RCC_ClockConfig+0x1b8>)
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bee:	4b20      	ldr	r3, [pc, #128]	; (8001c70 <HAL_RCC_ClockConfig+0x1b8>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d001      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e032      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d008      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c0c:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	4916      	ldr	r1, [pc, #88]	; (8001c74 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0308 	and.w	r3, r3, #8
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d009      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c2a:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	490e      	ldr	r1, [pc, #56]	; (8001c74 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c3e:	f000 f821 	bl	8001c84 <HAL_RCC_GetSysClockFreq>
 8001c42:	4602      	mov	r2, r0
 8001c44:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <HAL_RCC_ClockConfig+0x1bc>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	091b      	lsrs	r3, r3, #4
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	490a      	ldr	r1, [pc, #40]	; (8001c78 <HAL_RCC_ClockConfig+0x1c0>)
 8001c50:	5ccb      	ldrb	r3, [r1, r3]
 8001c52:	fa22 f303 	lsr.w	r3, r2, r3
 8001c56:	4a09      	ldr	r2, [pc, #36]	; (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c5a:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <HAL_RCC_ClockConfig+0x1c8>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff f916 	bl	8000e90 <HAL_InitTick>

  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40023c00 	.word	0x40023c00
 8001c74:	40023800 	.word	0x40023800
 8001c78:	08004d0c 	.word	0x08004d0c
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	20000004 	.word	0x20000004

08001c84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c88:	b090      	sub	sp, #64	; 0x40
 8001c8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	637b      	str	r3, [r7, #52]	; 0x34
 8001c90:	2300      	movs	r3, #0
 8001c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c94:	2300      	movs	r3, #0
 8001c96:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c9c:	4b59      	ldr	r3, [pc, #356]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 030c 	and.w	r3, r3, #12
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d00d      	beq.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x40>
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	f200 80a1 	bhi.w	8001df0 <HAL_RCC_GetSysClockFreq+0x16c>
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d002      	beq.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x34>
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d003      	beq.n	8001cbe <HAL_RCC_GetSysClockFreq+0x3a>
 8001cb6:	e09b      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cb8:	4b53      	ldr	r3, [pc, #332]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cba:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001cbc:	e09b      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cbe:	4b53      	ldr	r3, [pc, #332]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x188>)
 8001cc0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cc2:	e098      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cc4:	4b4f      	ldr	r3, [pc, #316]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ccc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cce:	4b4d      	ldr	r3, [pc, #308]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d028      	beq.n	8001d2c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cda:	4b4a      	ldr	r3, [pc, #296]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	099b      	lsrs	r3, r3, #6
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	623b      	str	r3, [r7, #32]
 8001ce4:	627a      	str	r2, [r7, #36]	; 0x24
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
 8001ce8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001cec:	2100      	movs	r1, #0
 8001cee:	4b47      	ldr	r3, [pc, #284]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x188>)
 8001cf0:	fb03 f201 	mul.w	r2, r3, r1
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	fb00 f303 	mul.w	r3, r0, r3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	4a43      	ldr	r2, [pc, #268]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x188>)
 8001cfe:	fba0 1202 	umull	r1, r2, r0, r2
 8001d02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d04:	460a      	mov	r2, r1
 8001d06:	62ba      	str	r2, [r7, #40]	; 0x28
 8001d08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d0a:	4413      	add	r3, r2
 8001d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d10:	2200      	movs	r2, #0
 8001d12:	61bb      	str	r3, [r7, #24]
 8001d14:	61fa      	str	r2, [r7, #28]
 8001d16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d1e:	f7fe faaf 	bl	8000280 <__aeabi_uldivmod>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4613      	mov	r3, r2
 8001d28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d2a:	e053      	b.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d2c:	4b35      	ldr	r3, [pc, #212]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	099b      	lsrs	r3, r3, #6
 8001d32:	2200      	movs	r2, #0
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	617a      	str	r2, [r7, #20]
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d3e:	f04f 0b00 	mov.w	fp, #0
 8001d42:	4652      	mov	r2, sl
 8001d44:	465b      	mov	r3, fp
 8001d46:	f04f 0000 	mov.w	r0, #0
 8001d4a:	f04f 0100 	mov.w	r1, #0
 8001d4e:	0159      	lsls	r1, r3, #5
 8001d50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d54:	0150      	lsls	r0, r2, #5
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	ebb2 080a 	subs.w	r8, r2, sl
 8001d5e:	eb63 090b 	sbc.w	r9, r3, fp
 8001d62:	f04f 0200 	mov.w	r2, #0
 8001d66:	f04f 0300 	mov.w	r3, #0
 8001d6a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d6e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d72:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d76:	ebb2 0408 	subs.w	r4, r2, r8
 8001d7a:	eb63 0509 	sbc.w	r5, r3, r9
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	f04f 0300 	mov.w	r3, #0
 8001d86:	00eb      	lsls	r3, r5, #3
 8001d88:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d8c:	00e2      	lsls	r2, r4, #3
 8001d8e:	4614      	mov	r4, r2
 8001d90:	461d      	mov	r5, r3
 8001d92:	eb14 030a 	adds.w	r3, r4, sl
 8001d96:	603b      	str	r3, [r7, #0]
 8001d98:	eb45 030b 	adc.w	r3, r5, fp
 8001d9c:	607b      	str	r3, [r7, #4]
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	f04f 0300 	mov.w	r3, #0
 8001da6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001daa:	4629      	mov	r1, r5
 8001dac:	028b      	lsls	r3, r1, #10
 8001dae:	4621      	mov	r1, r4
 8001db0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001db4:	4621      	mov	r1, r4
 8001db6:	028a      	lsls	r2, r1, #10
 8001db8:	4610      	mov	r0, r2
 8001dba:	4619      	mov	r1, r3
 8001dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	60fa      	str	r2, [r7, #12]
 8001dc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001dc8:	f7fe fa5a 	bl	8000280 <__aeabi_uldivmod>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	0c1b      	lsrs	r3, r3, #16
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	3301      	adds	r3, #1
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001de4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001dee:	e002      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001df0:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x184>)
 8001df2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001df4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3740      	adds	r7, #64	; 0x40
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e02:	bf00      	nop
 8001e04:	40023800 	.word	0x40023800
 8001e08:	00f42400 	.word	0x00f42400
 8001e0c:	017d7840 	.word	0x017d7840

08001e10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e14:	4b03      	ldr	r3, [pc, #12]	; (8001e24 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e16:	681b      	ldr	r3, [r3, #0]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	20000000 	.word	0x20000000

08001e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e2c:	f7ff fff0 	bl	8001e10 <HAL_RCC_GetHCLKFreq>
 8001e30:	4602      	mov	r2, r0
 8001e32:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	0a9b      	lsrs	r3, r3, #10
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	4903      	ldr	r1, [pc, #12]	; (8001e4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e3e:	5ccb      	ldrb	r3, [r1, r3]
 8001e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	08004d1c 	.word	0x08004d1c

08001e50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e54:	f7ff ffdc 	bl	8001e10 <HAL_RCC_GetHCLKFreq>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	0b5b      	lsrs	r3, r3, #13
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	4903      	ldr	r1, [pc, #12]	; (8001e74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e66:	5ccb      	ldrb	r3, [r1, r3]
 8001e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40023800 	.word	0x40023800
 8001e74:	08004d1c 	.word	0x08004d1c

08001e78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e041      	b.n	8001f0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d106      	bne.n	8001ea4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7fe fd8e 	bl	80009c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	f000 fbf4 	bl	80026a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e041      	b.n	8001fac <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d106      	bne.n	8001f42 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f839 	bl	8001fb4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2202      	movs	r2, #2
 8001f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3304      	adds	r3, #4
 8001f52:	4619      	mov	r1, r3
 8001f54:	4610      	mov	r0, r2
 8001f56:	f000 fba5 	bl	80026a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d109      	bne.n	8001fec <HAL_TIM_PWM_Start+0x24>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	bf14      	ite	ne
 8001fe4:	2301      	movne	r3, #1
 8001fe6:	2300      	moveq	r3, #0
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	e022      	b.n	8002032 <HAL_TIM_PWM_Start+0x6a>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	d109      	bne.n	8002006 <HAL_TIM_PWM_Start+0x3e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	bf14      	ite	ne
 8001ffe:	2301      	movne	r3, #1
 8002000:	2300      	moveq	r3, #0
 8002002:	b2db      	uxtb	r3, r3
 8002004:	e015      	b.n	8002032 <HAL_TIM_PWM_Start+0x6a>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	2b08      	cmp	r3, #8
 800200a:	d109      	bne.n	8002020 <HAL_TIM_PWM_Start+0x58>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b01      	cmp	r3, #1
 8002016:	bf14      	ite	ne
 8002018:	2301      	movne	r3, #1
 800201a:	2300      	moveq	r3, #0
 800201c:	b2db      	uxtb	r3, r3
 800201e:	e008      	b.n	8002032 <HAL_TIM_PWM_Start+0x6a>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b01      	cmp	r3, #1
 800202a:	bf14      	ite	ne
 800202c:	2301      	movne	r3, #1
 800202e:	2300      	moveq	r3, #0
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e068      	b.n	800210c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d104      	bne.n	800204a <HAL_TIM_PWM_Start+0x82>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2202      	movs	r2, #2
 8002044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002048:	e013      	b.n	8002072 <HAL_TIM_PWM_Start+0xaa>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	2b04      	cmp	r3, #4
 800204e:	d104      	bne.n	800205a <HAL_TIM_PWM_Start+0x92>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2202      	movs	r2, #2
 8002054:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002058:	e00b      	b.n	8002072 <HAL_TIM_PWM_Start+0xaa>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	2b08      	cmp	r3, #8
 800205e:	d104      	bne.n	800206a <HAL_TIM_PWM_Start+0xa2>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2202      	movs	r2, #2
 8002064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002068:	e003      	b.n	8002072 <HAL_TIM_PWM_Start+0xaa>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2202      	movs	r2, #2
 800206e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2201      	movs	r2, #1
 8002078:	6839      	ldr	r1, [r7, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f000 fdc4 	bl	8002c08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a23      	ldr	r2, [pc, #140]	; (8002114 <HAL_TIM_PWM_Start+0x14c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d107      	bne.n	800209a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002098:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a1d      	ldr	r2, [pc, #116]	; (8002114 <HAL_TIM_PWM_Start+0x14c>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d018      	beq.n	80020d6 <HAL_TIM_PWM_Start+0x10e>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ac:	d013      	beq.n	80020d6 <HAL_TIM_PWM_Start+0x10e>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a19      	ldr	r2, [pc, #100]	; (8002118 <HAL_TIM_PWM_Start+0x150>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d00e      	beq.n	80020d6 <HAL_TIM_PWM_Start+0x10e>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a17      	ldr	r2, [pc, #92]	; (800211c <HAL_TIM_PWM_Start+0x154>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d009      	beq.n	80020d6 <HAL_TIM_PWM_Start+0x10e>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a16      	ldr	r2, [pc, #88]	; (8002120 <HAL_TIM_PWM_Start+0x158>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d004      	beq.n	80020d6 <HAL_TIM_PWM_Start+0x10e>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a14      	ldr	r2, [pc, #80]	; (8002124 <HAL_TIM_PWM_Start+0x15c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d111      	bne.n	80020fa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2b06      	cmp	r3, #6
 80020e6:	d010      	beq.n	800210a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 0201 	orr.w	r2, r2, #1
 80020f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020f8:	e007      	b.n	800210a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f042 0201 	orr.w	r2, r2, #1
 8002108:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40010000 	.word	0x40010000
 8002118:	40000400 	.word	0x40000400
 800211c:	40000800 	.word	0x40000800
 8002120:	40000c00 	.word	0x40000c00
 8002124:	40014000 	.word	0x40014000

08002128 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e097      	b.n	800226c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	d106      	bne.n	8002156 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7fe fc57 	bl	8000a04 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2202      	movs	r2, #2
 800215a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6812      	ldr	r2, [r2, #0]
 8002168:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800216c:	f023 0307 	bic.w	r3, r3, #7
 8002170:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	3304      	adds	r3, #4
 800217a:	4619      	mov	r1, r3
 800217c:	4610      	mov	r0, r2
 800217e:	f000 fa91 	bl	80026a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021aa:	f023 0303 	bic.w	r3, r3, #3
 80021ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	021b      	lsls	r3, r3, #8
 80021ba:	4313      	orrs	r3, r2
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4313      	orrs	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80021c8:	f023 030c 	bic.w	r3, r3, #12
 80021cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80021d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	021b      	lsls	r3, r3, #8
 80021e4:	4313      	orrs	r3, r2
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	011a      	lsls	r2, r3, #4
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	031b      	lsls	r3, r3, #12
 80021f8:	4313      	orrs	r3, r2
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002206:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800220e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	011b      	lsls	r3, r3, #4
 800221a:	4313      	orrs	r3, r2
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	4313      	orrs	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002284:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800228c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002294:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800229c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d110      	bne.n	80022c6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d102      	bne.n	80022b0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80022aa:	7b7b      	ldrb	r3, [r7, #13]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d001      	beq.n	80022b4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e069      	b.n	8002388 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2202      	movs	r2, #2
 80022b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2202      	movs	r2, #2
 80022c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022c4:	e031      	b.n	800232a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	d110      	bne.n	80022ee <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80022cc:	7bbb      	ldrb	r3, [r7, #14]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d102      	bne.n	80022d8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80022d2:	7b3b      	ldrb	r3, [r7, #12]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d001      	beq.n	80022dc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e055      	b.n	8002388 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2202      	movs	r2, #2
 80022e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2202      	movs	r2, #2
 80022e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022ec:	e01d      	b.n	800232a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d108      	bne.n	8002306 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80022f4:	7bbb      	ldrb	r3, [r7, #14]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d105      	bne.n	8002306 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80022fa:	7b7b      	ldrb	r3, [r7, #13]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d102      	bne.n	8002306 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002300:	7b3b      	ldrb	r3, [r7, #12]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d001      	beq.n	800230a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e03e      	b.n	8002388 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2202      	movs	r2, #2
 800230e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2202      	movs	r2, #2
 8002316:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2202      	movs	r2, #2
 800231e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2202      	movs	r2, #2
 8002326:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <HAL_TIM_Encoder_Start+0xc4>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	2b04      	cmp	r3, #4
 8002334:	d008      	beq.n	8002348 <HAL_TIM_Encoder_Start+0xd4>
 8002336:	e00f      	b.n	8002358 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2201      	movs	r2, #1
 800233e:	2100      	movs	r1, #0
 8002340:	4618      	mov	r0, r3
 8002342:	f000 fc61 	bl	8002c08 <TIM_CCxChannelCmd>
      break;
 8002346:	e016      	b.n	8002376 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2201      	movs	r2, #1
 800234e:	2104      	movs	r1, #4
 8002350:	4618      	mov	r0, r3
 8002352:	f000 fc59 	bl	8002c08 <TIM_CCxChannelCmd>
      break;
 8002356:	e00e      	b.n	8002376 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2201      	movs	r2, #1
 800235e:	2100      	movs	r1, #0
 8002360:	4618      	mov	r0, r3
 8002362:	f000 fc51 	bl	8002c08 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2201      	movs	r2, #1
 800236c:	2104      	movs	r1, #4
 800236e:	4618      	mov	r0, r3
 8002370:	f000 fc4a 	bl	8002c08 <TIM_CCxChannelCmd>
      break;
 8002374:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f042 0201 	orr.w	r2, r2, #1
 8002384:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800239c:	2300      	movs	r3, #0
 800239e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d101      	bne.n	80023ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80023aa:	2302      	movs	r3, #2
 80023ac:	e0ae      	b.n	800250c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b0c      	cmp	r3, #12
 80023ba:	f200 809f 	bhi.w	80024fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80023be:	a201      	add	r2, pc, #4	; (adr r2, 80023c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80023c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c4:	080023f9 	.word	0x080023f9
 80023c8:	080024fd 	.word	0x080024fd
 80023cc:	080024fd 	.word	0x080024fd
 80023d0:	080024fd 	.word	0x080024fd
 80023d4:	08002439 	.word	0x08002439
 80023d8:	080024fd 	.word	0x080024fd
 80023dc:	080024fd 	.word	0x080024fd
 80023e0:	080024fd 	.word	0x080024fd
 80023e4:	0800247b 	.word	0x0800247b
 80023e8:	080024fd 	.word	0x080024fd
 80023ec:	080024fd 	.word	0x080024fd
 80023f0:	080024fd 	.word	0x080024fd
 80023f4:	080024bb 	.word	0x080024bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68b9      	ldr	r1, [r7, #8]
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 f9dc 	bl	80027bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	699a      	ldr	r2, [r3, #24]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0208 	orr.w	r2, r2, #8
 8002412:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	699a      	ldr	r2, [r3, #24]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0204 	bic.w	r2, r2, #4
 8002422:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6999      	ldr	r1, [r3, #24]
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	691a      	ldr	r2, [r3, #16]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	430a      	orrs	r2, r1
 8002434:	619a      	str	r2, [r3, #24]
      break;
 8002436:	e064      	b.n	8002502 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68b9      	ldr	r1, [r7, #8]
 800243e:	4618      	mov	r0, r3
 8002440:	f000 fa22 	bl	8002888 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	699a      	ldr	r2, [r3, #24]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002452:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	699a      	ldr	r2, [r3, #24]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002462:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6999      	ldr	r1, [r3, #24]
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	021a      	lsls	r2, r3, #8
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	619a      	str	r2, [r3, #24]
      break;
 8002478:	e043      	b.n	8002502 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68b9      	ldr	r1, [r7, #8]
 8002480:	4618      	mov	r0, r3
 8002482:	f000 fa6d 	bl	8002960 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	69da      	ldr	r2, [r3, #28]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f042 0208 	orr.w	r2, r2, #8
 8002494:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	69da      	ldr	r2, [r3, #28]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0204 	bic.w	r2, r2, #4
 80024a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	69d9      	ldr	r1, [r3, #28]
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	691a      	ldr	r2, [r3, #16]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	61da      	str	r2, [r3, #28]
      break;
 80024b8:	e023      	b.n	8002502 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68b9      	ldr	r1, [r7, #8]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 fab7 	bl	8002a34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	69da      	ldr	r2, [r3, #28]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	69da      	ldr	r2, [r3, #28]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	69d9      	ldr	r1, [r3, #28]
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	021a      	lsls	r2, r3, #8
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	61da      	str	r2, [r3, #28]
      break;
 80024fa:	e002      	b.n	8002502 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	75fb      	strb	r3, [r7, #23]
      break;
 8002500:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800250a:	7dfb      	ldrb	r3, [r7, #23]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800251e:	2300      	movs	r3, #0
 8002520:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002528:	2b01      	cmp	r3, #1
 800252a:	d101      	bne.n	8002530 <HAL_TIM_ConfigClockSource+0x1c>
 800252c:	2302      	movs	r3, #2
 800252e:	e0b4      	b.n	800269a <HAL_TIM_ConfigClockSource+0x186>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2202      	movs	r2, #2
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800254e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002556:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002568:	d03e      	beq.n	80025e8 <HAL_TIM_ConfigClockSource+0xd4>
 800256a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800256e:	f200 8087 	bhi.w	8002680 <HAL_TIM_ConfigClockSource+0x16c>
 8002572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002576:	f000 8086 	beq.w	8002686 <HAL_TIM_ConfigClockSource+0x172>
 800257a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800257e:	d87f      	bhi.n	8002680 <HAL_TIM_ConfigClockSource+0x16c>
 8002580:	2b70      	cmp	r3, #112	; 0x70
 8002582:	d01a      	beq.n	80025ba <HAL_TIM_ConfigClockSource+0xa6>
 8002584:	2b70      	cmp	r3, #112	; 0x70
 8002586:	d87b      	bhi.n	8002680 <HAL_TIM_ConfigClockSource+0x16c>
 8002588:	2b60      	cmp	r3, #96	; 0x60
 800258a:	d050      	beq.n	800262e <HAL_TIM_ConfigClockSource+0x11a>
 800258c:	2b60      	cmp	r3, #96	; 0x60
 800258e:	d877      	bhi.n	8002680 <HAL_TIM_ConfigClockSource+0x16c>
 8002590:	2b50      	cmp	r3, #80	; 0x50
 8002592:	d03c      	beq.n	800260e <HAL_TIM_ConfigClockSource+0xfa>
 8002594:	2b50      	cmp	r3, #80	; 0x50
 8002596:	d873      	bhi.n	8002680 <HAL_TIM_ConfigClockSource+0x16c>
 8002598:	2b40      	cmp	r3, #64	; 0x40
 800259a:	d058      	beq.n	800264e <HAL_TIM_ConfigClockSource+0x13a>
 800259c:	2b40      	cmp	r3, #64	; 0x40
 800259e:	d86f      	bhi.n	8002680 <HAL_TIM_ConfigClockSource+0x16c>
 80025a0:	2b30      	cmp	r3, #48	; 0x30
 80025a2:	d064      	beq.n	800266e <HAL_TIM_ConfigClockSource+0x15a>
 80025a4:	2b30      	cmp	r3, #48	; 0x30
 80025a6:	d86b      	bhi.n	8002680 <HAL_TIM_ConfigClockSource+0x16c>
 80025a8:	2b20      	cmp	r3, #32
 80025aa:	d060      	beq.n	800266e <HAL_TIM_ConfigClockSource+0x15a>
 80025ac:	2b20      	cmp	r3, #32
 80025ae:	d867      	bhi.n	8002680 <HAL_TIM_ConfigClockSource+0x16c>
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d05c      	beq.n	800266e <HAL_TIM_ConfigClockSource+0x15a>
 80025b4:	2b10      	cmp	r3, #16
 80025b6:	d05a      	beq.n	800266e <HAL_TIM_ConfigClockSource+0x15a>
 80025b8:	e062      	b.n	8002680 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025ca:	f000 fafd 	bl	8002bc8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	609a      	str	r2, [r3, #8]
      break;
 80025e6:	e04f      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025f8:	f000 fae6 	bl	8002bc8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800260a:	609a      	str	r2, [r3, #8]
      break;
 800260c:	e03c      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800261a:	461a      	mov	r2, r3
 800261c:	f000 fa5a 	bl	8002ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2150      	movs	r1, #80	; 0x50
 8002626:	4618      	mov	r0, r3
 8002628:	f000 fab3 	bl	8002b92 <TIM_ITRx_SetConfig>
      break;
 800262c:	e02c      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800263a:	461a      	mov	r2, r3
 800263c:	f000 fa79 	bl	8002b32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2160      	movs	r1, #96	; 0x60
 8002646:	4618      	mov	r0, r3
 8002648:	f000 faa3 	bl	8002b92 <TIM_ITRx_SetConfig>
      break;
 800264c:	e01c      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800265a:	461a      	mov	r2, r3
 800265c:	f000 fa3a 	bl	8002ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2140      	movs	r1, #64	; 0x40
 8002666:	4618      	mov	r0, r3
 8002668:	f000 fa93 	bl	8002b92 <TIM_ITRx_SetConfig>
      break;
 800266c:	e00c      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4619      	mov	r1, r3
 8002678:	4610      	mov	r0, r2
 800267a:	f000 fa8a 	bl	8002b92 <TIM_ITRx_SetConfig>
      break;
 800267e:	e003      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	73fb      	strb	r3, [r7, #15]
      break;
 8002684:	e000      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002686:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002698:	7bfb      	ldrb	r3, [r7, #15]
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a3a      	ldr	r2, [pc, #232]	; (80027a0 <TIM_Base_SetConfig+0xfc>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d00f      	beq.n	80026dc <TIM_Base_SetConfig+0x38>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c2:	d00b      	beq.n	80026dc <TIM_Base_SetConfig+0x38>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a37      	ldr	r2, [pc, #220]	; (80027a4 <TIM_Base_SetConfig+0x100>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d007      	beq.n	80026dc <TIM_Base_SetConfig+0x38>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a36      	ldr	r2, [pc, #216]	; (80027a8 <TIM_Base_SetConfig+0x104>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d003      	beq.n	80026dc <TIM_Base_SetConfig+0x38>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a35      	ldr	r2, [pc, #212]	; (80027ac <TIM_Base_SetConfig+0x108>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d108      	bne.n	80026ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a2b      	ldr	r2, [pc, #172]	; (80027a0 <TIM_Base_SetConfig+0xfc>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d01b      	beq.n	800272e <TIM_Base_SetConfig+0x8a>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026fc:	d017      	beq.n	800272e <TIM_Base_SetConfig+0x8a>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a28      	ldr	r2, [pc, #160]	; (80027a4 <TIM_Base_SetConfig+0x100>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d013      	beq.n	800272e <TIM_Base_SetConfig+0x8a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a27      	ldr	r2, [pc, #156]	; (80027a8 <TIM_Base_SetConfig+0x104>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d00f      	beq.n	800272e <TIM_Base_SetConfig+0x8a>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a26      	ldr	r2, [pc, #152]	; (80027ac <TIM_Base_SetConfig+0x108>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d00b      	beq.n	800272e <TIM_Base_SetConfig+0x8a>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a25      	ldr	r2, [pc, #148]	; (80027b0 <TIM_Base_SetConfig+0x10c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d007      	beq.n	800272e <TIM_Base_SetConfig+0x8a>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a24      	ldr	r2, [pc, #144]	; (80027b4 <TIM_Base_SetConfig+0x110>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d003      	beq.n	800272e <TIM_Base_SetConfig+0x8a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a23      	ldr	r2, [pc, #140]	; (80027b8 <TIM_Base_SetConfig+0x114>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d108      	bne.n	8002740 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	4313      	orrs	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	4313      	orrs	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a0e      	ldr	r2, [pc, #56]	; (80027a0 <TIM_Base_SetConfig+0xfc>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d103      	bne.n	8002774 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	691a      	ldr	r2, [r3, #16]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b01      	cmp	r3, #1
 8002784:	d105      	bne.n	8002792 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	f023 0201 	bic.w	r2, r3, #1
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	611a      	str	r2, [r3, #16]
  }
}
 8002792:	bf00      	nop
 8002794:	3714      	adds	r7, #20
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40010000 	.word	0x40010000
 80027a4:	40000400 	.word	0x40000400
 80027a8:	40000800 	.word	0x40000800
 80027ac:	40000c00 	.word	0x40000c00
 80027b0:	40014000 	.word	0x40014000
 80027b4:	40014400 	.word	0x40014400
 80027b8:	40014800 	.word	0x40014800

080027bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027bc:	b480      	push	{r7}
 80027be:	b087      	sub	sp, #28
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	f023 0201 	bic.w	r2, r3, #1
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f023 0303 	bic.w	r3, r3, #3
 80027f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f023 0302 	bic.w	r3, r3, #2
 8002804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	4313      	orrs	r3, r2
 800280e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a1c      	ldr	r2, [pc, #112]	; (8002884 <TIM_OC1_SetConfig+0xc8>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d10c      	bne.n	8002832 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	f023 0308 	bic.w	r3, r3, #8
 800281e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	4313      	orrs	r3, r2
 8002828:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f023 0304 	bic.w	r3, r3, #4
 8002830:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a13      	ldr	r2, [pc, #76]	; (8002884 <TIM_OC1_SetConfig+0xc8>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d111      	bne.n	800285e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002840:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002848:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	4313      	orrs	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	621a      	str	r2, [r3, #32]
}
 8002878:	bf00      	nop
 800287a:	371c      	adds	r7, #28
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	40010000 	.word	0x40010000

08002888 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002888:	b480      	push	{r7}
 800288a:	b087      	sub	sp, #28
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	f023 0210 	bic.w	r2, r3, #16
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	021b      	lsls	r3, r3, #8
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	f023 0320 	bic.w	r3, r3, #32
 80028d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	4313      	orrs	r3, r2
 80028de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a1e      	ldr	r2, [pc, #120]	; (800295c <TIM_OC2_SetConfig+0xd4>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d10d      	bne.n	8002904 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	011b      	lsls	r3, r3, #4
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002902:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a15      	ldr	r2, [pc, #84]	; (800295c <TIM_OC2_SetConfig+0xd4>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d113      	bne.n	8002934 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002912:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800291a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	4313      	orrs	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	621a      	str	r2, [r3, #32]
}
 800294e:	bf00      	nop
 8002950:	371c      	adds	r7, #28
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	40010000 	.word	0x40010000

08002960 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002960:	b480      	push	{r7}
 8002962:	b087      	sub	sp, #28
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800298e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f023 0303 	bic.w	r3, r3, #3
 8002996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	4313      	orrs	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	021b      	lsls	r3, r3, #8
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a1d      	ldr	r2, [pc, #116]	; (8002a30 <TIM_OC3_SetConfig+0xd0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d10d      	bne.n	80029da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	021b      	lsls	r3, r3, #8
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a14      	ldr	r2, [pc, #80]	; (8002a30 <TIM_OC3_SetConfig+0xd0>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d113      	bne.n	8002a0a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	011b      	lsls	r3, r3, #4
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	621a      	str	r2, [r3, #32]
}
 8002a24:	bf00      	nop
 8002a26:	371c      	adds	r7, #28
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	40010000 	.word	0x40010000

08002a34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b087      	sub	sp, #28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	021b      	lsls	r3, r3, #8
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	031b      	lsls	r3, r3, #12
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a10      	ldr	r2, [pc, #64]	; (8002ad0 <TIM_OC4_SetConfig+0x9c>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d109      	bne.n	8002aa8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	019b      	lsls	r3, r3, #6
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	621a      	str	r2, [r3, #32]
}
 8002ac2:	bf00      	nop
 8002ac4:	371c      	adds	r7, #28
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	40010000 	.word	0x40010000

08002ad4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	f023 0201 	bic.w	r2, r3, #1
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	011b      	lsls	r3, r3, #4
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f023 030a 	bic.w	r3, r3, #10
 8002b10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	621a      	str	r2, [r3, #32]
}
 8002b26:	bf00      	nop
 8002b28:	371c      	adds	r7, #28
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b087      	sub	sp, #28
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	f023 0210 	bic.w	r2, r3, #16
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	031b      	lsls	r3, r3, #12
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b6e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	621a      	str	r2, [r3, #32]
}
 8002b86:	bf00      	nop
 8002b88:	371c      	adds	r7, #28
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b085      	sub	sp, #20
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f043 0307 	orr.w	r3, r3, #7
 8002bb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	609a      	str	r2, [r3, #8]
}
 8002bbc:	bf00      	nop
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b087      	sub	sp, #28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
 8002bd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002be2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	021a      	lsls	r2, r3, #8
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	431a      	orrs	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	609a      	str	r2, [r3, #8]
}
 8002bfc:	bf00      	nop
 8002bfe:	371c      	adds	r7, #28
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	f003 031f 	and.w	r3, r3, #31
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a1a      	ldr	r2, [r3, #32]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	401a      	ands	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a1a      	ldr	r2, [r3, #32]
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f003 031f 	and.w	r3, r3, #31
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c40:	431a      	orrs	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	621a      	str	r2, [r3, #32]
}
 8002c46:	bf00      	nop
 8002c48:	371c      	adds	r7, #28
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
	...

08002c54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d101      	bne.n	8002c6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c68:	2302      	movs	r3, #2
 8002c6a:	e050      	b.n	8002d0e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2202      	movs	r2, #2
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a1c      	ldr	r2, [pc, #112]	; (8002d1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d018      	beq.n	8002ce2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb8:	d013      	beq.n	8002ce2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a18      	ldr	r2, [pc, #96]	; (8002d20 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d00e      	beq.n	8002ce2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a16      	ldr	r2, [pc, #88]	; (8002d24 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d009      	beq.n	8002ce2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a15      	ldr	r2, [pc, #84]	; (8002d28 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d004      	beq.n	8002ce2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a13      	ldr	r2, [pc, #76]	; (8002d2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d10c      	bne.n	8002cfc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ce8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40010000 	.word	0x40010000
 8002d20:	40000400 	.word	0x40000400
 8002d24:	40000800 	.word	0x40000800
 8002d28:	40000c00 	.word	0x40000c00
 8002d2c:	40014000 	.word	0x40014000

08002d30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e03d      	b.n	8002dc8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e042      	b.n	8002e6c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d106      	bne.n	8002e00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7fd fe84 	bl	8000b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2224      	movs	r2, #36	; 0x24
 8002e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 fdbd 	bl	8003998 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	695a      	ldr	r2, [r3, #20]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b08a      	sub	sp, #40	; 0x28
 8002e78:	af02      	add	r7, sp, #8
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	603b      	str	r3, [r7, #0]
 8002e80:	4613      	mov	r3, r2
 8002e82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b20      	cmp	r3, #32
 8002e92:	d175      	bne.n	8002f80 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d002      	beq.n	8002ea0 <HAL_UART_Transmit+0x2c>
 8002e9a:	88fb      	ldrh	r3, [r7, #6]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e06e      	b.n	8002f82 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2221      	movs	r2, #33	; 0x21
 8002eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eb2:	f7fe f831 	bl	8000f18 <HAL_GetTick>
 8002eb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	88fa      	ldrh	r2, [r7, #6]
 8002ebc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	88fa      	ldrh	r2, [r7, #6]
 8002ec2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ecc:	d108      	bne.n	8002ee0 <HAL_UART_Transmit+0x6c>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d104      	bne.n	8002ee0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	61bb      	str	r3, [r7, #24]
 8002ede:	e003      	b.n	8002ee8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ee8:	e02e      	b.n	8002f48 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	2180      	movs	r1, #128	; 0x80
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f000 fb1f 	bl	8003538 <UART_WaitOnFlagUntilTimeout>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d005      	beq.n	8002f0c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e03a      	b.n	8002f82 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10b      	bne.n	8002f2a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	461a      	mov	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	3302      	adds	r3, #2
 8002f26:	61bb      	str	r3, [r7, #24]
 8002f28:	e007      	b.n	8002f3a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	781a      	ldrb	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	3301      	adds	r3, #1
 8002f38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1cb      	bne.n	8002eea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	2140      	movs	r1, #64	; 0x40
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f000 faeb 	bl	8003538 <UART_WaitOnFlagUntilTimeout>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e006      	b.n	8002f82 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2220      	movs	r2, #32
 8002f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	e000      	b.n	8002f82 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002f80:	2302      	movs	r3, #2
  }
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3720      	adds	r7, #32
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b084      	sub	sp, #16
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	60f8      	str	r0, [r7, #12]
 8002f92:	60b9      	str	r1, [r7, #8]
 8002f94:	4613      	mov	r3, r2
 8002f96:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b20      	cmp	r3, #32
 8002fa2:	d112      	bne.n	8002fca <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <HAL_UART_Receive_IT+0x26>
 8002faa:	88fb      	ldrh	r3, [r7, #6]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e00b      	b.n	8002fcc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002fba:	88fb      	ldrh	r3, [r7, #6]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	68b9      	ldr	r1, [r7, #8]
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 fb12 	bl	80035ea <UART_Start_Receive_IT>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	e000      	b.n	8002fcc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002fca:	2302      	movs	r3, #2
  }
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b0ba      	sub	sp, #232	; 0xe8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003000:	2300      	movs	r3, #0
 8003002:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003012:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10f      	bne.n	800303a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800301a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800301e:	f003 0320 	and.w	r3, r3, #32
 8003022:	2b00      	cmp	r3, #0
 8003024:	d009      	beq.n	800303a <HAL_UART_IRQHandler+0x66>
 8003026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800302a:	f003 0320 	and.w	r3, r3, #32
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 fbf2 	bl	800381c <UART_Receive_IT>
      return;
 8003038:	e25b      	b.n	80034f2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800303a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800303e:	2b00      	cmp	r3, #0
 8003040:	f000 80de 	beq.w	8003200 <HAL_UART_IRQHandler+0x22c>
 8003044:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b00      	cmp	r3, #0
 800304e:	d106      	bne.n	800305e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003054:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 80d1 	beq.w	8003200 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800305e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00b      	beq.n	8003082 <HAL_UART_IRQHandler+0xae>
 800306a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800306e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003072:	2b00      	cmp	r3, #0
 8003074:	d005      	beq.n	8003082 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307a:	f043 0201 	orr.w	r2, r3, #1
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00b      	beq.n	80030a6 <HAL_UART_IRQHandler+0xd2>
 800308e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d005      	beq.n	80030a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309e:	f043 0202 	orr.w	r2, r3, #2
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00b      	beq.n	80030ca <HAL_UART_IRQHandler+0xf6>
 80030b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d005      	beq.n	80030ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c2:	f043 0204 	orr.w	r2, r3, #4
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80030ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d011      	beq.n	80030fa <HAL_UART_IRQHandler+0x126>
 80030d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030da:	f003 0320 	and.w	r3, r3, #32
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d105      	bne.n	80030ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80030e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d005      	beq.n	80030fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f2:	f043 0208 	orr.w	r2, r3, #8
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 81f2 	beq.w	80034e8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003108:	f003 0320 	and.w	r3, r3, #32
 800310c:	2b00      	cmp	r3, #0
 800310e:	d008      	beq.n	8003122 <HAL_UART_IRQHandler+0x14e>
 8003110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003114:	f003 0320 	and.w	r3, r3, #32
 8003118:	2b00      	cmp	r3, #0
 800311a:	d002      	beq.n	8003122 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 fb7d 	bl	800381c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312c:	2b40      	cmp	r3, #64	; 0x40
 800312e:	bf0c      	ite	eq
 8003130:	2301      	moveq	r3, #1
 8003132:	2300      	movne	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d103      	bne.n	800314e <HAL_UART_IRQHandler+0x17a>
 8003146:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800314a:	2b00      	cmp	r3, #0
 800314c:	d04f      	beq.n	80031ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 fa85 	bl	800365e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315e:	2b40      	cmp	r3, #64	; 0x40
 8003160:	d141      	bne.n	80031e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	3314      	adds	r3, #20
 8003168:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003170:	e853 3f00 	ldrex	r3, [r3]
 8003174:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003178:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800317c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003180:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	3314      	adds	r3, #20
 800318a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800318e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003192:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003196:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800319a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800319e:	e841 2300 	strex	r3, r2, [r1]
 80031a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80031a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1d9      	bne.n	8003162 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d013      	beq.n	80031de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ba:	4a7e      	ldr	r2, [pc, #504]	; (80033b4 <HAL_UART_IRQHandler+0x3e0>)
 80031bc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7fe f859 	bl	800127a <HAL_DMA_Abort_IT>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d016      	beq.n	80031fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80031d8:	4610      	mov	r0, r2
 80031da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031dc:	e00e      	b.n	80031fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f994 	bl	800350c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e4:	e00a      	b.n	80031fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f990 	bl	800350c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031ec:	e006      	b.n	80031fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f98c 	bl	800350c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80031fa:	e175      	b.n	80034e8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031fc:	bf00      	nop
    return;
 80031fe:	e173      	b.n	80034e8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003204:	2b01      	cmp	r3, #1
 8003206:	f040 814f 	bne.w	80034a8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800320a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800320e:	f003 0310 	and.w	r3, r3, #16
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 8148 	beq.w	80034a8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800321c:	f003 0310 	and.w	r3, r3, #16
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 8141 	beq.w	80034a8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003226:	2300      	movs	r3, #0
 8003228:	60bb      	str	r3, [r7, #8]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	60bb      	str	r3, [r7, #8]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	60bb      	str	r3, [r7, #8]
 800323a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003246:	2b40      	cmp	r3, #64	; 0x40
 8003248:	f040 80b6 	bne.w	80033b8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003258:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 8145 	beq.w	80034ec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003266:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800326a:	429a      	cmp	r2, r3
 800326c:	f080 813e 	bcs.w	80034ec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003276:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003282:	f000 8088 	beq.w	8003396 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	330c      	adds	r3, #12
 800328c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003290:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003294:	e853 3f00 	ldrex	r3, [r3]
 8003298:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800329c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	330c      	adds	r3, #12
 80032ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80032b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80032be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80032c2:	e841 2300 	strex	r3, r2, [r1]
 80032c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80032ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1d9      	bne.n	8003286 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	3314      	adds	r3, #20
 80032d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032dc:	e853 3f00 	ldrex	r3, [r3]
 80032e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80032e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032e4:	f023 0301 	bic.w	r3, r3, #1
 80032e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3314      	adds	r3, #20
 80032f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80032fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80032fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003302:	e841 2300 	strex	r3, r2, [r1]
 8003306:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003308:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1e1      	bne.n	80032d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	3314      	adds	r3, #20
 8003314:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003316:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003318:	e853 3f00 	ldrex	r3, [r3]
 800331c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800331e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003320:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003324:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	3314      	adds	r3, #20
 800332e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003332:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003334:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003336:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003338:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800333a:	e841 2300 	strex	r3, r2, [r1]
 800333e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003340:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1e3      	bne.n	800330e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	330c      	adds	r3, #12
 800335a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800335e:	e853 3f00 	ldrex	r3, [r3]
 8003362:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003366:	f023 0310 	bic.w	r3, r3, #16
 800336a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	330c      	adds	r3, #12
 8003374:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003378:	65ba      	str	r2, [r7, #88]	; 0x58
 800337a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800337e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003380:	e841 2300 	strex	r3, r2, [r1]
 8003384:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1e3      	bne.n	8003354 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003390:	4618      	mov	r0, r3
 8003392:	f7fd ff02 	bl	800119a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2202      	movs	r2, #2
 800339a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	4619      	mov	r1, r3
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f8b7 	bl	8003520 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80033b2:	e09b      	b.n	80034ec <HAL_UART_IRQHandler+0x518>
 80033b4:	08003725 	.word	0x08003725
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 808e 	beq.w	80034f0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80033d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 8089 	beq.w	80034f0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	330c      	adds	r3, #12
 80033e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e8:	e853 3f00 	ldrex	r3, [r3]
 80033ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80033ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	330c      	adds	r3, #12
 80033fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003402:	647a      	str	r2, [r7, #68]	; 0x44
 8003404:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003406:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003408:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800340a:	e841 2300 	strex	r3, r2, [r1]
 800340e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1e3      	bne.n	80033de <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	3314      	adds	r3, #20
 800341c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	e853 3f00 	ldrex	r3, [r3]
 8003424:	623b      	str	r3, [r7, #32]
   return(result);
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	f023 0301 	bic.w	r3, r3, #1
 800342c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	3314      	adds	r3, #20
 8003436:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800343a:	633a      	str	r2, [r7, #48]	; 0x30
 800343c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003442:	e841 2300 	strex	r3, r2, [r1]
 8003446:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1e3      	bne.n	8003416 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2220      	movs	r2, #32
 8003452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	330c      	adds	r3, #12
 8003462:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	e853 3f00 	ldrex	r3, [r3]
 800346a:	60fb      	str	r3, [r7, #12]
   return(result);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f023 0310 	bic.w	r3, r3, #16
 8003472:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	330c      	adds	r3, #12
 800347c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003480:	61fa      	str	r2, [r7, #28]
 8003482:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003484:	69b9      	ldr	r1, [r7, #24]
 8003486:	69fa      	ldr	r2, [r7, #28]
 8003488:	e841 2300 	strex	r3, r2, [r1]
 800348c:	617b      	str	r3, [r7, #20]
   return(result);
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1e3      	bne.n	800345c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800349a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800349e:	4619      	mov	r1, r3
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f83d 	bl	8003520 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034a6:	e023      	b.n	80034f0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d009      	beq.n	80034c8 <HAL_UART_IRQHandler+0x4f4>
 80034b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f943 	bl	800374c <UART_Transmit_IT>
    return;
 80034c6:	e014      	b.n	80034f2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80034c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00e      	beq.n	80034f2 <HAL_UART_IRQHandler+0x51e>
 80034d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d008      	beq.n	80034f2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 f983 	bl	80037ec <UART_EndTransmit_IT>
    return;
 80034e6:	e004      	b.n	80034f2 <HAL_UART_IRQHandler+0x51e>
    return;
 80034e8:	bf00      	nop
 80034ea:	e002      	b.n	80034f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80034ec:	bf00      	nop
 80034ee:	e000      	b.n	80034f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80034f0:	bf00      	nop
  }
}
 80034f2:	37e8      	adds	r7, #232	; 0xe8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	460b      	mov	r3, r1
 800352a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	603b      	str	r3, [r7, #0]
 8003544:	4613      	mov	r3, r2
 8003546:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003548:	e03b      	b.n	80035c2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003550:	d037      	beq.n	80035c2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003552:	f7fd fce1 	bl	8000f18 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	6a3a      	ldr	r2, [r7, #32]
 800355e:	429a      	cmp	r2, r3
 8003560:	d302      	bcc.n	8003568 <UART_WaitOnFlagUntilTimeout+0x30>
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e03a      	b.n	80035e2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f003 0304 	and.w	r3, r3, #4
 8003576:	2b00      	cmp	r3, #0
 8003578:	d023      	beq.n	80035c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	2b80      	cmp	r3, #128	; 0x80
 800357e:	d020      	beq.n	80035c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2b40      	cmp	r3, #64	; 0x40
 8003584:	d01d      	beq.n	80035c2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0308 	and.w	r3, r3, #8
 8003590:	2b08      	cmp	r3, #8
 8003592:	d116      	bne.n	80035c2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003594:	2300      	movs	r3, #0
 8003596:	617b      	str	r3, [r7, #20]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	617b      	str	r3, [r7, #20]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	617b      	str	r3, [r7, #20]
 80035a8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 f857 	bl	800365e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2208      	movs	r2, #8
 80035b4:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e00f      	b.n	80035e2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	4013      	ands	r3, r2
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	bf0c      	ite	eq
 80035d2:	2301      	moveq	r3, #1
 80035d4:	2300      	movne	r3, #0
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	461a      	mov	r2, r3
 80035da:	79fb      	ldrb	r3, [r7, #7]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d0b4      	beq.n	800354a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b085      	sub	sp, #20
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	60f8      	str	r0, [r7, #12]
 80035f2:	60b9      	str	r1, [r7, #8]
 80035f4:	4613      	mov	r3, r2
 80035f6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	88fa      	ldrh	r2, [r7, #6]
 8003602:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	88fa      	ldrh	r2, [r7, #6]
 8003608:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2222      	movs	r2, #34	; 0x22
 8003614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d007      	beq.n	8003630 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800362e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695a      	ldr	r2, [r3, #20]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0201 	orr.w	r2, r2, #1
 800363e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0220 	orr.w	r2, r2, #32
 800364e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800365e:	b480      	push	{r7}
 8003660:	b095      	sub	sp, #84	; 0x54
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	330c      	adds	r3, #12
 800366c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003670:	e853 3f00 	ldrex	r3, [r3]
 8003674:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003678:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800367c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	330c      	adds	r3, #12
 8003684:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003686:	643a      	str	r2, [r7, #64]	; 0x40
 8003688:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800368c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800368e:	e841 2300 	strex	r3, r2, [r1]
 8003692:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1e5      	bne.n	8003666 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	3314      	adds	r3, #20
 80036a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	e853 3f00 	ldrex	r3, [r3]
 80036a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	f023 0301 	bic.w	r3, r3, #1
 80036b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	3314      	adds	r3, #20
 80036b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036c2:	e841 2300 	strex	r3, r2, [r1]
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1e5      	bne.n	800369a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d119      	bne.n	800370a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	330c      	adds	r3, #12
 80036dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	e853 3f00 	ldrex	r3, [r3]
 80036e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	f023 0310 	bic.w	r3, r3, #16
 80036ec:	647b      	str	r3, [r7, #68]	; 0x44
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	330c      	adds	r3, #12
 80036f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036f6:	61ba      	str	r2, [r7, #24]
 80036f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fa:	6979      	ldr	r1, [r7, #20]
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	e841 2300 	strex	r3, r2, [r1]
 8003702:	613b      	str	r3, [r7, #16]
   return(result);
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1e5      	bne.n	80036d6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2220      	movs	r2, #32
 800370e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003718:	bf00      	nop
 800371a:	3754      	adds	r7, #84	; 0x54
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003730:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f7ff fee4 	bl	800350c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003744:	bf00      	nop
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b21      	cmp	r3, #33	; 0x21
 800375e:	d13e      	bne.n	80037de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003768:	d114      	bne.n	8003794 <UART_Transmit_IT+0x48>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d110      	bne.n	8003794 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	881b      	ldrh	r3, [r3, #0]
 800377c:	461a      	mov	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003786:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	1c9a      	adds	r2, r3, #2
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	621a      	str	r2, [r3, #32]
 8003792:	e008      	b.n	80037a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	1c59      	adds	r1, r3, #1
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6211      	str	r1, [r2, #32]
 800379e:	781a      	ldrb	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	4619      	mov	r1, r3
 80037b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10f      	bne.n	80037da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68da      	ldr	r2, [r3, #12]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68da      	ldr	r2, [r3, #12]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	e000      	b.n	80037e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80037de:	2302      	movs	r3, #2
  }
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003802:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2220      	movs	r2, #32
 8003808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7ff fe73 	bl	80034f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b08c      	sub	sp, #48	; 0x30
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b22      	cmp	r3, #34	; 0x22
 800382e:	f040 80ae 	bne.w	800398e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800383a:	d117      	bne.n	800386c <UART_Receive_IT+0x50>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d113      	bne.n	800386c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003844:	2300      	movs	r3, #0
 8003846:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	b29b      	uxth	r3, r3
 8003856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800385a:	b29a      	uxth	r2, r3
 800385c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003864:	1c9a      	adds	r2, r3, #2
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	629a      	str	r2, [r3, #40]	; 0x28
 800386a:	e026      	b.n	80038ba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003870:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003872:	2300      	movs	r3, #0
 8003874:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800387e:	d007      	beq.n	8003890 <UART_Receive_IT+0x74>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10a      	bne.n	800389e <UART_Receive_IT+0x82>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d106      	bne.n	800389e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	b2da      	uxtb	r2, r3
 8003898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389a:	701a      	strb	r2, [r3, #0]
 800389c:	e008      	b.n	80038b0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b4:	1c5a      	adds	r2, r3, #1
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038be:	b29b      	uxth	r3, r3
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	4619      	mov	r1, r3
 80038c8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d15d      	bne.n	800398a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0220 	bic.w	r2, r2, #32
 80038dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68da      	ldr	r2, [r3, #12]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695a      	ldr	r2, [r3, #20]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 0201 	bic.w	r2, r2, #1
 80038fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2220      	movs	r2, #32
 8003902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003910:	2b01      	cmp	r3, #1
 8003912:	d135      	bne.n	8003980 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	330c      	adds	r3, #12
 8003920:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	e853 3f00 	ldrex	r3, [r3]
 8003928:	613b      	str	r3, [r7, #16]
   return(result);
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	f023 0310 	bic.w	r3, r3, #16
 8003930:	627b      	str	r3, [r7, #36]	; 0x24
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	330c      	adds	r3, #12
 8003938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800393a:	623a      	str	r2, [r7, #32]
 800393c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393e:	69f9      	ldr	r1, [r7, #28]
 8003940:	6a3a      	ldr	r2, [r7, #32]
 8003942:	e841 2300 	strex	r3, r2, [r1]
 8003946:	61bb      	str	r3, [r7, #24]
   return(result);
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1e5      	bne.n	800391a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0310 	and.w	r3, r3, #16
 8003958:	2b10      	cmp	r3, #16
 800395a:	d10a      	bne.n	8003972 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800395c:	2300      	movs	r3, #0
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003976:	4619      	mov	r1, r3
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7ff fdd1 	bl	8003520 <HAL_UARTEx_RxEventCallback>
 800397e:	e002      	b.n	8003986 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7fd f9f5 	bl	8000d70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003986:	2300      	movs	r3, #0
 8003988:	e002      	b.n	8003990 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800398a:	2300      	movs	r3, #0
 800398c:	e000      	b.n	8003990 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800398e:	2302      	movs	r3, #2
  }
}
 8003990:	4618      	mov	r0, r3
 8003992:	3730      	adds	r7, #48	; 0x30
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800399c:	b0c0      	sub	sp, #256	; 0x100
 800399e:	af00      	add	r7, sp, #0
 80039a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80039b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b4:	68d9      	ldr	r1, [r3, #12]
 80039b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	ea40 0301 	orr.w	r3, r0, r1
 80039c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	431a      	orrs	r2, r3
 80039d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	431a      	orrs	r2, r3
 80039d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	4313      	orrs	r3, r2
 80039e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80039e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80039f0:	f021 010c 	bic.w	r1, r1, #12
 80039f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80039fe:	430b      	orrs	r3, r1
 8003a00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a12:	6999      	ldr	r1, [r3, #24]
 8003a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	ea40 0301 	orr.w	r3, r0, r1
 8003a1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	4b8f      	ldr	r3, [pc, #572]	; (8003c64 <UART_SetConfig+0x2cc>)
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d005      	beq.n	8003a38 <UART_SetConfig+0xa0>
 8003a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	4b8d      	ldr	r3, [pc, #564]	; (8003c68 <UART_SetConfig+0x2d0>)
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d104      	bne.n	8003a42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a38:	f7fe fa0a 	bl	8001e50 <HAL_RCC_GetPCLK2Freq>
 8003a3c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003a40:	e003      	b.n	8003a4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a42:	f7fe f9f1 	bl	8001e28 <HAL_RCC_GetPCLK1Freq>
 8003a46:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a54:	f040 810c 	bne.w	8003c70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a62:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a6a:	4622      	mov	r2, r4
 8003a6c:	462b      	mov	r3, r5
 8003a6e:	1891      	adds	r1, r2, r2
 8003a70:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a72:	415b      	adcs	r3, r3
 8003a74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a7a:	4621      	mov	r1, r4
 8003a7c:	eb12 0801 	adds.w	r8, r2, r1
 8003a80:	4629      	mov	r1, r5
 8003a82:	eb43 0901 	adc.w	r9, r3, r1
 8003a86:	f04f 0200 	mov.w	r2, #0
 8003a8a:	f04f 0300 	mov.w	r3, #0
 8003a8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a9a:	4690      	mov	r8, r2
 8003a9c:	4699      	mov	r9, r3
 8003a9e:	4623      	mov	r3, r4
 8003aa0:	eb18 0303 	adds.w	r3, r8, r3
 8003aa4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003aa8:	462b      	mov	r3, r5
 8003aaa:	eb49 0303 	adc.w	r3, r9, r3
 8003aae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003abe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003ac2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	18db      	adds	r3, r3, r3
 8003aca:	653b      	str	r3, [r7, #80]	; 0x50
 8003acc:	4613      	mov	r3, r2
 8003ace:	eb42 0303 	adc.w	r3, r2, r3
 8003ad2:	657b      	str	r3, [r7, #84]	; 0x54
 8003ad4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ad8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003adc:	f7fc fbd0 	bl	8000280 <__aeabi_uldivmod>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4b61      	ldr	r3, [pc, #388]	; (8003c6c <UART_SetConfig+0x2d4>)
 8003ae6:	fba3 2302 	umull	r2, r3, r3, r2
 8003aea:	095b      	lsrs	r3, r3, #5
 8003aec:	011c      	lsls	r4, r3, #4
 8003aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003af2:	2200      	movs	r2, #0
 8003af4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003af8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003afc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003b00:	4642      	mov	r2, r8
 8003b02:	464b      	mov	r3, r9
 8003b04:	1891      	adds	r1, r2, r2
 8003b06:	64b9      	str	r1, [r7, #72]	; 0x48
 8003b08:	415b      	adcs	r3, r3
 8003b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b10:	4641      	mov	r1, r8
 8003b12:	eb12 0a01 	adds.w	sl, r2, r1
 8003b16:	4649      	mov	r1, r9
 8003b18:	eb43 0b01 	adc.w	fp, r3, r1
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	f04f 0300 	mov.w	r3, #0
 8003b24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b30:	4692      	mov	sl, r2
 8003b32:	469b      	mov	fp, r3
 8003b34:	4643      	mov	r3, r8
 8003b36:	eb1a 0303 	adds.w	r3, sl, r3
 8003b3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b3e:	464b      	mov	r3, r9
 8003b40:	eb4b 0303 	adc.w	r3, fp, r3
 8003b44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b54:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	18db      	adds	r3, r3, r3
 8003b60:	643b      	str	r3, [r7, #64]	; 0x40
 8003b62:	4613      	mov	r3, r2
 8003b64:	eb42 0303 	adc.w	r3, r2, r3
 8003b68:	647b      	str	r3, [r7, #68]	; 0x44
 8003b6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b72:	f7fc fb85 	bl	8000280 <__aeabi_uldivmod>
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	4b3b      	ldr	r3, [pc, #236]	; (8003c6c <UART_SetConfig+0x2d4>)
 8003b7e:	fba3 2301 	umull	r2, r3, r3, r1
 8003b82:	095b      	lsrs	r3, r3, #5
 8003b84:	2264      	movs	r2, #100	; 0x64
 8003b86:	fb02 f303 	mul.w	r3, r2, r3
 8003b8a:	1acb      	subs	r3, r1, r3
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b92:	4b36      	ldr	r3, [pc, #216]	; (8003c6c <UART_SetConfig+0x2d4>)
 8003b94:	fba3 2302 	umull	r2, r3, r3, r2
 8003b98:	095b      	lsrs	r3, r3, #5
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ba0:	441c      	add	r4, r3
 8003ba2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003bac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003bb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003bb4:	4642      	mov	r2, r8
 8003bb6:	464b      	mov	r3, r9
 8003bb8:	1891      	adds	r1, r2, r2
 8003bba:	63b9      	str	r1, [r7, #56]	; 0x38
 8003bbc:	415b      	adcs	r3, r3
 8003bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003bc4:	4641      	mov	r1, r8
 8003bc6:	1851      	adds	r1, r2, r1
 8003bc8:	6339      	str	r1, [r7, #48]	; 0x30
 8003bca:	4649      	mov	r1, r9
 8003bcc:	414b      	adcs	r3, r1
 8003bce:	637b      	str	r3, [r7, #52]	; 0x34
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003bdc:	4659      	mov	r1, fp
 8003bde:	00cb      	lsls	r3, r1, #3
 8003be0:	4651      	mov	r1, sl
 8003be2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003be6:	4651      	mov	r1, sl
 8003be8:	00ca      	lsls	r2, r1, #3
 8003bea:	4610      	mov	r0, r2
 8003bec:	4619      	mov	r1, r3
 8003bee:	4603      	mov	r3, r0
 8003bf0:	4642      	mov	r2, r8
 8003bf2:	189b      	adds	r3, r3, r2
 8003bf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003bf8:	464b      	mov	r3, r9
 8003bfa:	460a      	mov	r2, r1
 8003bfc:	eb42 0303 	adc.w	r3, r2, r3
 8003c00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003c10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003c14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003c18:	460b      	mov	r3, r1
 8003c1a:	18db      	adds	r3, r3, r3
 8003c1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c1e:	4613      	mov	r3, r2
 8003c20:	eb42 0303 	adc.w	r3, r2, r3
 8003c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003c2e:	f7fc fb27 	bl	8000280 <__aeabi_uldivmod>
 8003c32:	4602      	mov	r2, r0
 8003c34:	460b      	mov	r3, r1
 8003c36:	4b0d      	ldr	r3, [pc, #52]	; (8003c6c <UART_SetConfig+0x2d4>)
 8003c38:	fba3 1302 	umull	r1, r3, r3, r2
 8003c3c:	095b      	lsrs	r3, r3, #5
 8003c3e:	2164      	movs	r1, #100	; 0x64
 8003c40:	fb01 f303 	mul.w	r3, r1, r3
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	3332      	adds	r3, #50	; 0x32
 8003c4a:	4a08      	ldr	r2, [pc, #32]	; (8003c6c <UART_SetConfig+0x2d4>)
 8003c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c50:	095b      	lsrs	r3, r3, #5
 8003c52:	f003 0207 	and.w	r2, r3, #7
 8003c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4422      	add	r2, r4
 8003c5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c60:	e106      	b.n	8003e70 <UART_SetConfig+0x4d8>
 8003c62:	bf00      	nop
 8003c64:	40011000 	.word	0x40011000
 8003c68:	40011400 	.word	0x40011400
 8003c6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c74:	2200      	movs	r2, #0
 8003c76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003c82:	4642      	mov	r2, r8
 8003c84:	464b      	mov	r3, r9
 8003c86:	1891      	adds	r1, r2, r2
 8003c88:	6239      	str	r1, [r7, #32]
 8003c8a:	415b      	adcs	r3, r3
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c92:	4641      	mov	r1, r8
 8003c94:	1854      	adds	r4, r2, r1
 8003c96:	4649      	mov	r1, r9
 8003c98:	eb43 0501 	adc.w	r5, r3, r1
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	00eb      	lsls	r3, r5, #3
 8003ca6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003caa:	00e2      	lsls	r2, r4, #3
 8003cac:	4614      	mov	r4, r2
 8003cae:	461d      	mov	r5, r3
 8003cb0:	4643      	mov	r3, r8
 8003cb2:	18e3      	adds	r3, r4, r3
 8003cb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003cb8:	464b      	mov	r3, r9
 8003cba:	eb45 0303 	adc.w	r3, r5, r3
 8003cbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003cce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003cd2:	f04f 0200 	mov.w	r2, #0
 8003cd6:	f04f 0300 	mov.w	r3, #0
 8003cda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003cde:	4629      	mov	r1, r5
 8003ce0:	008b      	lsls	r3, r1, #2
 8003ce2:	4621      	mov	r1, r4
 8003ce4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ce8:	4621      	mov	r1, r4
 8003cea:	008a      	lsls	r2, r1, #2
 8003cec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003cf0:	f7fc fac6 	bl	8000280 <__aeabi_uldivmod>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4b60      	ldr	r3, [pc, #384]	; (8003e7c <UART_SetConfig+0x4e4>)
 8003cfa:	fba3 2302 	umull	r2, r3, r3, r2
 8003cfe:	095b      	lsrs	r3, r3, #5
 8003d00:	011c      	lsls	r4, r3, #4
 8003d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d06:	2200      	movs	r2, #0
 8003d08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003d14:	4642      	mov	r2, r8
 8003d16:	464b      	mov	r3, r9
 8003d18:	1891      	adds	r1, r2, r2
 8003d1a:	61b9      	str	r1, [r7, #24]
 8003d1c:	415b      	adcs	r3, r3
 8003d1e:	61fb      	str	r3, [r7, #28]
 8003d20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d24:	4641      	mov	r1, r8
 8003d26:	1851      	adds	r1, r2, r1
 8003d28:	6139      	str	r1, [r7, #16]
 8003d2a:	4649      	mov	r1, r9
 8003d2c:	414b      	adcs	r3, r1
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	f04f 0300 	mov.w	r3, #0
 8003d38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d3c:	4659      	mov	r1, fp
 8003d3e:	00cb      	lsls	r3, r1, #3
 8003d40:	4651      	mov	r1, sl
 8003d42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d46:	4651      	mov	r1, sl
 8003d48:	00ca      	lsls	r2, r1, #3
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4603      	mov	r3, r0
 8003d50:	4642      	mov	r2, r8
 8003d52:	189b      	adds	r3, r3, r2
 8003d54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d58:	464b      	mov	r3, r9
 8003d5a:	460a      	mov	r2, r1
 8003d5c:	eb42 0303 	adc.w	r3, r2, r3
 8003d60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003d70:	f04f 0200 	mov.w	r2, #0
 8003d74:	f04f 0300 	mov.w	r3, #0
 8003d78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d7c:	4649      	mov	r1, r9
 8003d7e:	008b      	lsls	r3, r1, #2
 8003d80:	4641      	mov	r1, r8
 8003d82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d86:	4641      	mov	r1, r8
 8003d88:	008a      	lsls	r2, r1, #2
 8003d8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d8e:	f7fc fa77 	bl	8000280 <__aeabi_uldivmod>
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	4611      	mov	r1, r2
 8003d98:	4b38      	ldr	r3, [pc, #224]	; (8003e7c <UART_SetConfig+0x4e4>)
 8003d9a:	fba3 2301 	umull	r2, r3, r3, r1
 8003d9e:	095b      	lsrs	r3, r3, #5
 8003da0:	2264      	movs	r2, #100	; 0x64
 8003da2:	fb02 f303 	mul.w	r3, r2, r3
 8003da6:	1acb      	subs	r3, r1, r3
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	3332      	adds	r3, #50	; 0x32
 8003dac:	4a33      	ldr	r2, [pc, #204]	; (8003e7c <UART_SetConfig+0x4e4>)
 8003dae:	fba2 2303 	umull	r2, r3, r2, r3
 8003db2:	095b      	lsrs	r3, r3, #5
 8003db4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003db8:	441c      	add	r4, r3
 8003dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	673b      	str	r3, [r7, #112]	; 0x70
 8003dc2:	677a      	str	r2, [r7, #116]	; 0x74
 8003dc4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003dc8:	4642      	mov	r2, r8
 8003dca:	464b      	mov	r3, r9
 8003dcc:	1891      	adds	r1, r2, r2
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	415b      	adcs	r3, r3
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dd8:	4641      	mov	r1, r8
 8003dda:	1851      	adds	r1, r2, r1
 8003ddc:	6039      	str	r1, [r7, #0]
 8003dde:	4649      	mov	r1, r9
 8003de0:	414b      	adcs	r3, r1
 8003de2:	607b      	str	r3, [r7, #4]
 8003de4:	f04f 0200 	mov.w	r2, #0
 8003de8:	f04f 0300 	mov.w	r3, #0
 8003dec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003df0:	4659      	mov	r1, fp
 8003df2:	00cb      	lsls	r3, r1, #3
 8003df4:	4651      	mov	r1, sl
 8003df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dfa:	4651      	mov	r1, sl
 8003dfc:	00ca      	lsls	r2, r1, #3
 8003dfe:	4610      	mov	r0, r2
 8003e00:	4619      	mov	r1, r3
 8003e02:	4603      	mov	r3, r0
 8003e04:	4642      	mov	r2, r8
 8003e06:	189b      	adds	r3, r3, r2
 8003e08:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e0a:	464b      	mov	r3, r9
 8003e0c:	460a      	mov	r2, r1
 8003e0e:	eb42 0303 	adc.w	r3, r2, r3
 8003e12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	663b      	str	r3, [r7, #96]	; 0x60
 8003e1e:	667a      	str	r2, [r7, #100]	; 0x64
 8003e20:	f04f 0200 	mov.w	r2, #0
 8003e24:	f04f 0300 	mov.w	r3, #0
 8003e28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003e2c:	4649      	mov	r1, r9
 8003e2e:	008b      	lsls	r3, r1, #2
 8003e30:	4641      	mov	r1, r8
 8003e32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e36:	4641      	mov	r1, r8
 8003e38:	008a      	lsls	r2, r1, #2
 8003e3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003e3e:	f7fc fa1f 	bl	8000280 <__aeabi_uldivmod>
 8003e42:	4602      	mov	r2, r0
 8003e44:	460b      	mov	r3, r1
 8003e46:	4b0d      	ldr	r3, [pc, #52]	; (8003e7c <UART_SetConfig+0x4e4>)
 8003e48:	fba3 1302 	umull	r1, r3, r3, r2
 8003e4c:	095b      	lsrs	r3, r3, #5
 8003e4e:	2164      	movs	r1, #100	; 0x64
 8003e50:	fb01 f303 	mul.w	r3, r1, r3
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	3332      	adds	r3, #50	; 0x32
 8003e5a:	4a08      	ldr	r2, [pc, #32]	; (8003e7c <UART_SetConfig+0x4e4>)
 8003e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e60:	095b      	lsrs	r3, r3, #5
 8003e62:	f003 020f 	and.w	r2, r3, #15
 8003e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4422      	add	r2, r4
 8003e6e:	609a      	str	r2, [r3, #8]
}
 8003e70:	bf00      	nop
 8003e72:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e76:	46bd      	mov	sp, r7
 8003e78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e7c:	51eb851f 	.word	0x51eb851f

08003e80 <std>:
 8003e80:	2300      	movs	r3, #0
 8003e82:	b510      	push	{r4, lr}
 8003e84:	4604      	mov	r4, r0
 8003e86:	e9c0 3300 	strd	r3, r3, [r0]
 8003e8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e8e:	6083      	str	r3, [r0, #8]
 8003e90:	8181      	strh	r1, [r0, #12]
 8003e92:	6643      	str	r3, [r0, #100]	; 0x64
 8003e94:	81c2      	strh	r2, [r0, #14]
 8003e96:	6183      	str	r3, [r0, #24]
 8003e98:	4619      	mov	r1, r3
 8003e9a:	2208      	movs	r2, #8
 8003e9c:	305c      	adds	r0, #92	; 0x5c
 8003e9e:	f000 f906 	bl	80040ae <memset>
 8003ea2:	4b0d      	ldr	r3, [pc, #52]	; (8003ed8 <std+0x58>)
 8003ea4:	6263      	str	r3, [r4, #36]	; 0x24
 8003ea6:	4b0d      	ldr	r3, [pc, #52]	; (8003edc <std+0x5c>)
 8003ea8:	62a3      	str	r3, [r4, #40]	; 0x28
 8003eaa:	4b0d      	ldr	r3, [pc, #52]	; (8003ee0 <std+0x60>)
 8003eac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003eae:	4b0d      	ldr	r3, [pc, #52]	; (8003ee4 <std+0x64>)
 8003eb0:	6323      	str	r3, [r4, #48]	; 0x30
 8003eb2:	4b0d      	ldr	r3, [pc, #52]	; (8003ee8 <std+0x68>)
 8003eb4:	6224      	str	r4, [r4, #32]
 8003eb6:	429c      	cmp	r4, r3
 8003eb8:	d006      	beq.n	8003ec8 <std+0x48>
 8003eba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003ebe:	4294      	cmp	r4, r2
 8003ec0:	d002      	beq.n	8003ec8 <std+0x48>
 8003ec2:	33d0      	adds	r3, #208	; 0xd0
 8003ec4:	429c      	cmp	r4, r3
 8003ec6:	d105      	bne.n	8003ed4 <std+0x54>
 8003ec8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ed0:	f000 b966 	b.w	80041a0 <__retarget_lock_init_recursive>
 8003ed4:	bd10      	pop	{r4, pc}
 8003ed6:	bf00      	nop
 8003ed8:	08004029 	.word	0x08004029
 8003edc:	0800404b 	.word	0x0800404b
 8003ee0:	08004083 	.word	0x08004083
 8003ee4:	080040a7 	.word	0x080040a7
 8003ee8:	2000026c 	.word	0x2000026c

08003eec <stdio_exit_handler>:
 8003eec:	4a02      	ldr	r2, [pc, #8]	; (8003ef8 <stdio_exit_handler+0xc>)
 8003eee:	4903      	ldr	r1, [pc, #12]	; (8003efc <stdio_exit_handler+0x10>)
 8003ef0:	4803      	ldr	r0, [pc, #12]	; (8003f00 <stdio_exit_handler+0x14>)
 8003ef2:	f000 b869 	b.w	8003fc8 <_fwalk_sglue>
 8003ef6:	bf00      	nop
 8003ef8:	2000000c 	.word	0x2000000c
 8003efc:	08004a4d 	.word	0x08004a4d
 8003f00:	20000018 	.word	0x20000018

08003f04 <cleanup_stdio>:
 8003f04:	6841      	ldr	r1, [r0, #4]
 8003f06:	4b0c      	ldr	r3, [pc, #48]	; (8003f38 <cleanup_stdio+0x34>)
 8003f08:	4299      	cmp	r1, r3
 8003f0a:	b510      	push	{r4, lr}
 8003f0c:	4604      	mov	r4, r0
 8003f0e:	d001      	beq.n	8003f14 <cleanup_stdio+0x10>
 8003f10:	f000 fd9c 	bl	8004a4c <_fflush_r>
 8003f14:	68a1      	ldr	r1, [r4, #8]
 8003f16:	4b09      	ldr	r3, [pc, #36]	; (8003f3c <cleanup_stdio+0x38>)
 8003f18:	4299      	cmp	r1, r3
 8003f1a:	d002      	beq.n	8003f22 <cleanup_stdio+0x1e>
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	f000 fd95 	bl	8004a4c <_fflush_r>
 8003f22:	68e1      	ldr	r1, [r4, #12]
 8003f24:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <cleanup_stdio+0x3c>)
 8003f26:	4299      	cmp	r1, r3
 8003f28:	d004      	beq.n	8003f34 <cleanup_stdio+0x30>
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f30:	f000 bd8c 	b.w	8004a4c <_fflush_r>
 8003f34:	bd10      	pop	{r4, pc}
 8003f36:	bf00      	nop
 8003f38:	2000026c 	.word	0x2000026c
 8003f3c:	200002d4 	.word	0x200002d4
 8003f40:	2000033c 	.word	0x2000033c

08003f44 <global_stdio_init.part.0>:
 8003f44:	b510      	push	{r4, lr}
 8003f46:	4b0b      	ldr	r3, [pc, #44]	; (8003f74 <global_stdio_init.part.0+0x30>)
 8003f48:	4c0b      	ldr	r4, [pc, #44]	; (8003f78 <global_stdio_init.part.0+0x34>)
 8003f4a:	4a0c      	ldr	r2, [pc, #48]	; (8003f7c <global_stdio_init.part.0+0x38>)
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	4620      	mov	r0, r4
 8003f50:	2200      	movs	r2, #0
 8003f52:	2104      	movs	r1, #4
 8003f54:	f7ff ff94 	bl	8003e80 <std>
 8003f58:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	2109      	movs	r1, #9
 8003f60:	f7ff ff8e 	bl	8003e80 <std>
 8003f64:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003f68:	2202      	movs	r2, #2
 8003f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f6e:	2112      	movs	r1, #18
 8003f70:	f7ff bf86 	b.w	8003e80 <std>
 8003f74:	200003a4 	.word	0x200003a4
 8003f78:	2000026c 	.word	0x2000026c
 8003f7c:	08003eed 	.word	0x08003eed

08003f80 <__sfp_lock_acquire>:
 8003f80:	4801      	ldr	r0, [pc, #4]	; (8003f88 <__sfp_lock_acquire+0x8>)
 8003f82:	f000 b90e 	b.w	80041a2 <__retarget_lock_acquire_recursive>
 8003f86:	bf00      	nop
 8003f88:	200003ad 	.word	0x200003ad

08003f8c <__sfp_lock_release>:
 8003f8c:	4801      	ldr	r0, [pc, #4]	; (8003f94 <__sfp_lock_release+0x8>)
 8003f8e:	f000 b909 	b.w	80041a4 <__retarget_lock_release_recursive>
 8003f92:	bf00      	nop
 8003f94:	200003ad 	.word	0x200003ad

08003f98 <__sinit>:
 8003f98:	b510      	push	{r4, lr}
 8003f9a:	4604      	mov	r4, r0
 8003f9c:	f7ff fff0 	bl	8003f80 <__sfp_lock_acquire>
 8003fa0:	6a23      	ldr	r3, [r4, #32]
 8003fa2:	b11b      	cbz	r3, 8003fac <__sinit+0x14>
 8003fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fa8:	f7ff bff0 	b.w	8003f8c <__sfp_lock_release>
 8003fac:	4b04      	ldr	r3, [pc, #16]	; (8003fc0 <__sinit+0x28>)
 8003fae:	6223      	str	r3, [r4, #32]
 8003fb0:	4b04      	ldr	r3, [pc, #16]	; (8003fc4 <__sinit+0x2c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1f5      	bne.n	8003fa4 <__sinit+0xc>
 8003fb8:	f7ff ffc4 	bl	8003f44 <global_stdio_init.part.0>
 8003fbc:	e7f2      	b.n	8003fa4 <__sinit+0xc>
 8003fbe:	bf00      	nop
 8003fc0:	08003f05 	.word	0x08003f05
 8003fc4:	200003a4 	.word	0x200003a4

08003fc8 <_fwalk_sglue>:
 8003fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fcc:	4607      	mov	r7, r0
 8003fce:	4688      	mov	r8, r1
 8003fd0:	4614      	mov	r4, r2
 8003fd2:	2600      	movs	r6, #0
 8003fd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003fd8:	f1b9 0901 	subs.w	r9, r9, #1
 8003fdc:	d505      	bpl.n	8003fea <_fwalk_sglue+0x22>
 8003fde:	6824      	ldr	r4, [r4, #0]
 8003fe0:	2c00      	cmp	r4, #0
 8003fe2:	d1f7      	bne.n	8003fd4 <_fwalk_sglue+0xc>
 8003fe4:	4630      	mov	r0, r6
 8003fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fea:	89ab      	ldrh	r3, [r5, #12]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d907      	bls.n	8004000 <_fwalk_sglue+0x38>
 8003ff0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	d003      	beq.n	8004000 <_fwalk_sglue+0x38>
 8003ff8:	4629      	mov	r1, r5
 8003ffa:	4638      	mov	r0, r7
 8003ffc:	47c0      	blx	r8
 8003ffe:	4306      	orrs	r6, r0
 8004000:	3568      	adds	r5, #104	; 0x68
 8004002:	e7e9      	b.n	8003fd8 <_fwalk_sglue+0x10>

08004004 <iprintf>:
 8004004:	b40f      	push	{r0, r1, r2, r3}
 8004006:	b507      	push	{r0, r1, r2, lr}
 8004008:	4906      	ldr	r1, [pc, #24]	; (8004024 <iprintf+0x20>)
 800400a:	ab04      	add	r3, sp, #16
 800400c:	6808      	ldr	r0, [r1, #0]
 800400e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004012:	6881      	ldr	r1, [r0, #8]
 8004014:	9301      	str	r3, [sp, #4]
 8004016:	f000 f9e9 	bl	80043ec <_vfiprintf_r>
 800401a:	b003      	add	sp, #12
 800401c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004020:	b004      	add	sp, #16
 8004022:	4770      	bx	lr
 8004024:	20000064 	.word	0x20000064

08004028 <__sread>:
 8004028:	b510      	push	{r4, lr}
 800402a:	460c      	mov	r4, r1
 800402c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004030:	f000 f868 	bl	8004104 <_read_r>
 8004034:	2800      	cmp	r0, #0
 8004036:	bfab      	itete	ge
 8004038:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800403a:	89a3      	ldrhlt	r3, [r4, #12]
 800403c:	181b      	addge	r3, r3, r0
 800403e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004042:	bfac      	ite	ge
 8004044:	6563      	strge	r3, [r4, #84]	; 0x54
 8004046:	81a3      	strhlt	r3, [r4, #12]
 8004048:	bd10      	pop	{r4, pc}

0800404a <__swrite>:
 800404a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800404e:	461f      	mov	r7, r3
 8004050:	898b      	ldrh	r3, [r1, #12]
 8004052:	05db      	lsls	r3, r3, #23
 8004054:	4605      	mov	r5, r0
 8004056:	460c      	mov	r4, r1
 8004058:	4616      	mov	r6, r2
 800405a:	d505      	bpl.n	8004068 <__swrite+0x1e>
 800405c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004060:	2302      	movs	r3, #2
 8004062:	2200      	movs	r2, #0
 8004064:	f000 f83c 	bl	80040e0 <_lseek_r>
 8004068:	89a3      	ldrh	r3, [r4, #12]
 800406a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800406e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004072:	81a3      	strh	r3, [r4, #12]
 8004074:	4632      	mov	r2, r6
 8004076:	463b      	mov	r3, r7
 8004078:	4628      	mov	r0, r5
 800407a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800407e:	f000 b853 	b.w	8004128 <_write_r>

08004082 <__sseek>:
 8004082:	b510      	push	{r4, lr}
 8004084:	460c      	mov	r4, r1
 8004086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800408a:	f000 f829 	bl	80040e0 <_lseek_r>
 800408e:	1c43      	adds	r3, r0, #1
 8004090:	89a3      	ldrh	r3, [r4, #12]
 8004092:	bf15      	itete	ne
 8004094:	6560      	strne	r0, [r4, #84]	; 0x54
 8004096:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800409a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800409e:	81a3      	strheq	r3, [r4, #12]
 80040a0:	bf18      	it	ne
 80040a2:	81a3      	strhne	r3, [r4, #12]
 80040a4:	bd10      	pop	{r4, pc}

080040a6 <__sclose>:
 80040a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040aa:	f000 b809 	b.w	80040c0 <_close_r>

080040ae <memset>:
 80040ae:	4402      	add	r2, r0
 80040b0:	4603      	mov	r3, r0
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d100      	bne.n	80040b8 <memset+0xa>
 80040b6:	4770      	bx	lr
 80040b8:	f803 1b01 	strb.w	r1, [r3], #1
 80040bc:	e7f9      	b.n	80040b2 <memset+0x4>
	...

080040c0 <_close_r>:
 80040c0:	b538      	push	{r3, r4, r5, lr}
 80040c2:	4d06      	ldr	r5, [pc, #24]	; (80040dc <_close_r+0x1c>)
 80040c4:	2300      	movs	r3, #0
 80040c6:	4604      	mov	r4, r0
 80040c8:	4608      	mov	r0, r1
 80040ca:	602b      	str	r3, [r5, #0]
 80040cc:	f7fc fdbd 	bl	8000c4a <_close>
 80040d0:	1c43      	adds	r3, r0, #1
 80040d2:	d102      	bne.n	80040da <_close_r+0x1a>
 80040d4:	682b      	ldr	r3, [r5, #0]
 80040d6:	b103      	cbz	r3, 80040da <_close_r+0x1a>
 80040d8:	6023      	str	r3, [r4, #0]
 80040da:	bd38      	pop	{r3, r4, r5, pc}
 80040dc:	200003a8 	.word	0x200003a8

080040e0 <_lseek_r>:
 80040e0:	b538      	push	{r3, r4, r5, lr}
 80040e2:	4d07      	ldr	r5, [pc, #28]	; (8004100 <_lseek_r+0x20>)
 80040e4:	4604      	mov	r4, r0
 80040e6:	4608      	mov	r0, r1
 80040e8:	4611      	mov	r1, r2
 80040ea:	2200      	movs	r2, #0
 80040ec:	602a      	str	r2, [r5, #0]
 80040ee:	461a      	mov	r2, r3
 80040f0:	f7fc fdd2 	bl	8000c98 <_lseek>
 80040f4:	1c43      	adds	r3, r0, #1
 80040f6:	d102      	bne.n	80040fe <_lseek_r+0x1e>
 80040f8:	682b      	ldr	r3, [r5, #0]
 80040fa:	b103      	cbz	r3, 80040fe <_lseek_r+0x1e>
 80040fc:	6023      	str	r3, [r4, #0]
 80040fe:	bd38      	pop	{r3, r4, r5, pc}
 8004100:	200003a8 	.word	0x200003a8

08004104 <_read_r>:
 8004104:	b538      	push	{r3, r4, r5, lr}
 8004106:	4d07      	ldr	r5, [pc, #28]	; (8004124 <_read_r+0x20>)
 8004108:	4604      	mov	r4, r0
 800410a:	4608      	mov	r0, r1
 800410c:	4611      	mov	r1, r2
 800410e:	2200      	movs	r2, #0
 8004110:	602a      	str	r2, [r5, #0]
 8004112:	461a      	mov	r2, r3
 8004114:	f7fc fd7c 	bl	8000c10 <_read>
 8004118:	1c43      	adds	r3, r0, #1
 800411a:	d102      	bne.n	8004122 <_read_r+0x1e>
 800411c:	682b      	ldr	r3, [r5, #0]
 800411e:	b103      	cbz	r3, 8004122 <_read_r+0x1e>
 8004120:	6023      	str	r3, [r4, #0]
 8004122:	bd38      	pop	{r3, r4, r5, pc}
 8004124:	200003a8 	.word	0x200003a8

08004128 <_write_r>:
 8004128:	b538      	push	{r3, r4, r5, lr}
 800412a:	4d07      	ldr	r5, [pc, #28]	; (8004148 <_write_r+0x20>)
 800412c:	4604      	mov	r4, r0
 800412e:	4608      	mov	r0, r1
 8004130:	4611      	mov	r1, r2
 8004132:	2200      	movs	r2, #0
 8004134:	602a      	str	r2, [r5, #0]
 8004136:	461a      	mov	r2, r3
 8004138:	f7fc fe48 	bl	8000dcc <_write>
 800413c:	1c43      	adds	r3, r0, #1
 800413e:	d102      	bne.n	8004146 <_write_r+0x1e>
 8004140:	682b      	ldr	r3, [r5, #0]
 8004142:	b103      	cbz	r3, 8004146 <_write_r+0x1e>
 8004144:	6023      	str	r3, [r4, #0]
 8004146:	bd38      	pop	{r3, r4, r5, pc}
 8004148:	200003a8 	.word	0x200003a8

0800414c <__errno>:
 800414c:	4b01      	ldr	r3, [pc, #4]	; (8004154 <__errno+0x8>)
 800414e:	6818      	ldr	r0, [r3, #0]
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	20000064 	.word	0x20000064

08004158 <__libc_init_array>:
 8004158:	b570      	push	{r4, r5, r6, lr}
 800415a:	4d0d      	ldr	r5, [pc, #52]	; (8004190 <__libc_init_array+0x38>)
 800415c:	4c0d      	ldr	r4, [pc, #52]	; (8004194 <__libc_init_array+0x3c>)
 800415e:	1b64      	subs	r4, r4, r5
 8004160:	10a4      	asrs	r4, r4, #2
 8004162:	2600      	movs	r6, #0
 8004164:	42a6      	cmp	r6, r4
 8004166:	d109      	bne.n	800417c <__libc_init_array+0x24>
 8004168:	4d0b      	ldr	r5, [pc, #44]	; (8004198 <__libc_init_array+0x40>)
 800416a:	4c0c      	ldr	r4, [pc, #48]	; (800419c <__libc_init_array+0x44>)
 800416c:	f000 fdc0 	bl	8004cf0 <_init>
 8004170:	1b64      	subs	r4, r4, r5
 8004172:	10a4      	asrs	r4, r4, #2
 8004174:	2600      	movs	r6, #0
 8004176:	42a6      	cmp	r6, r4
 8004178:	d105      	bne.n	8004186 <__libc_init_array+0x2e>
 800417a:	bd70      	pop	{r4, r5, r6, pc}
 800417c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004180:	4798      	blx	r3
 8004182:	3601      	adds	r6, #1
 8004184:	e7ee      	b.n	8004164 <__libc_init_array+0xc>
 8004186:	f855 3b04 	ldr.w	r3, [r5], #4
 800418a:	4798      	blx	r3
 800418c:	3601      	adds	r6, #1
 800418e:	e7f2      	b.n	8004176 <__libc_init_array+0x1e>
 8004190:	08004d60 	.word	0x08004d60
 8004194:	08004d60 	.word	0x08004d60
 8004198:	08004d60 	.word	0x08004d60
 800419c:	08004d64 	.word	0x08004d64

080041a0 <__retarget_lock_init_recursive>:
 80041a0:	4770      	bx	lr

080041a2 <__retarget_lock_acquire_recursive>:
 80041a2:	4770      	bx	lr

080041a4 <__retarget_lock_release_recursive>:
 80041a4:	4770      	bx	lr
	...

080041a8 <_free_r>:
 80041a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80041aa:	2900      	cmp	r1, #0
 80041ac:	d044      	beq.n	8004238 <_free_r+0x90>
 80041ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041b2:	9001      	str	r0, [sp, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f1a1 0404 	sub.w	r4, r1, #4
 80041ba:	bfb8      	it	lt
 80041bc:	18e4      	addlt	r4, r4, r3
 80041be:	f000 f8df 	bl	8004380 <__malloc_lock>
 80041c2:	4a1e      	ldr	r2, [pc, #120]	; (800423c <_free_r+0x94>)
 80041c4:	9801      	ldr	r0, [sp, #4]
 80041c6:	6813      	ldr	r3, [r2, #0]
 80041c8:	b933      	cbnz	r3, 80041d8 <_free_r+0x30>
 80041ca:	6063      	str	r3, [r4, #4]
 80041cc:	6014      	str	r4, [r2, #0]
 80041ce:	b003      	add	sp, #12
 80041d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80041d4:	f000 b8da 	b.w	800438c <__malloc_unlock>
 80041d8:	42a3      	cmp	r3, r4
 80041da:	d908      	bls.n	80041ee <_free_r+0x46>
 80041dc:	6825      	ldr	r5, [r4, #0]
 80041de:	1961      	adds	r1, r4, r5
 80041e0:	428b      	cmp	r3, r1
 80041e2:	bf01      	itttt	eq
 80041e4:	6819      	ldreq	r1, [r3, #0]
 80041e6:	685b      	ldreq	r3, [r3, #4]
 80041e8:	1949      	addeq	r1, r1, r5
 80041ea:	6021      	streq	r1, [r4, #0]
 80041ec:	e7ed      	b.n	80041ca <_free_r+0x22>
 80041ee:	461a      	mov	r2, r3
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	b10b      	cbz	r3, 80041f8 <_free_r+0x50>
 80041f4:	42a3      	cmp	r3, r4
 80041f6:	d9fa      	bls.n	80041ee <_free_r+0x46>
 80041f8:	6811      	ldr	r1, [r2, #0]
 80041fa:	1855      	adds	r5, r2, r1
 80041fc:	42a5      	cmp	r5, r4
 80041fe:	d10b      	bne.n	8004218 <_free_r+0x70>
 8004200:	6824      	ldr	r4, [r4, #0]
 8004202:	4421      	add	r1, r4
 8004204:	1854      	adds	r4, r2, r1
 8004206:	42a3      	cmp	r3, r4
 8004208:	6011      	str	r1, [r2, #0]
 800420a:	d1e0      	bne.n	80041ce <_free_r+0x26>
 800420c:	681c      	ldr	r4, [r3, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	6053      	str	r3, [r2, #4]
 8004212:	440c      	add	r4, r1
 8004214:	6014      	str	r4, [r2, #0]
 8004216:	e7da      	b.n	80041ce <_free_r+0x26>
 8004218:	d902      	bls.n	8004220 <_free_r+0x78>
 800421a:	230c      	movs	r3, #12
 800421c:	6003      	str	r3, [r0, #0]
 800421e:	e7d6      	b.n	80041ce <_free_r+0x26>
 8004220:	6825      	ldr	r5, [r4, #0]
 8004222:	1961      	adds	r1, r4, r5
 8004224:	428b      	cmp	r3, r1
 8004226:	bf04      	itt	eq
 8004228:	6819      	ldreq	r1, [r3, #0]
 800422a:	685b      	ldreq	r3, [r3, #4]
 800422c:	6063      	str	r3, [r4, #4]
 800422e:	bf04      	itt	eq
 8004230:	1949      	addeq	r1, r1, r5
 8004232:	6021      	streq	r1, [r4, #0]
 8004234:	6054      	str	r4, [r2, #4]
 8004236:	e7ca      	b.n	80041ce <_free_r+0x26>
 8004238:	b003      	add	sp, #12
 800423a:	bd30      	pop	{r4, r5, pc}
 800423c:	200003b0 	.word	0x200003b0

08004240 <sbrk_aligned>:
 8004240:	b570      	push	{r4, r5, r6, lr}
 8004242:	4e0e      	ldr	r6, [pc, #56]	; (800427c <sbrk_aligned+0x3c>)
 8004244:	460c      	mov	r4, r1
 8004246:	6831      	ldr	r1, [r6, #0]
 8004248:	4605      	mov	r5, r0
 800424a:	b911      	cbnz	r1, 8004252 <sbrk_aligned+0x12>
 800424c:	f000 fcbc 	bl	8004bc8 <_sbrk_r>
 8004250:	6030      	str	r0, [r6, #0]
 8004252:	4621      	mov	r1, r4
 8004254:	4628      	mov	r0, r5
 8004256:	f000 fcb7 	bl	8004bc8 <_sbrk_r>
 800425a:	1c43      	adds	r3, r0, #1
 800425c:	d00a      	beq.n	8004274 <sbrk_aligned+0x34>
 800425e:	1cc4      	adds	r4, r0, #3
 8004260:	f024 0403 	bic.w	r4, r4, #3
 8004264:	42a0      	cmp	r0, r4
 8004266:	d007      	beq.n	8004278 <sbrk_aligned+0x38>
 8004268:	1a21      	subs	r1, r4, r0
 800426a:	4628      	mov	r0, r5
 800426c:	f000 fcac 	bl	8004bc8 <_sbrk_r>
 8004270:	3001      	adds	r0, #1
 8004272:	d101      	bne.n	8004278 <sbrk_aligned+0x38>
 8004274:	f04f 34ff 	mov.w	r4, #4294967295
 8004278:	4620      	mov	r0, r4
 800427a:	bd70      	pop	{r4, r5, r6, pc}
 800427c:	200003b4 	.word	0x200003b4

08004280 <_malloc_r>:
 8004280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004284:	1ccd      	adds	r5, r1, #3
 8004286:	f025 0503 	bic.w	r5, r5, #3
 800428a:	3508      	adds	r5, #8
 800428c:	2d0c      	cmp	r5, #12
 800428e:	bf38      	it	cc
 8004290:	250c      	movcc	r5, #12
 8004292:	2d00      	cmp	r5, #0
 8004294:	4607      	mov	r7, r0
 8004296:	db01      	blt.n	800429c <_malloc_r+0x1c>
 8004298:	42a9      	cmp	r1, r5
 800429a:	d905      	bls.n	80042a8 <_malloc_r+0x28>
 800429c:	230c      	movs	r3, #12
 800429e:	603b      	str	r3, [r7, #0]
 80042a0:	2600      	movs	r6, #0
 80042a2:	4630      	mov	r0, r6
 80042a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800437c <_malloc_r+0xfc>
 80042ac:	f000 f868 	bl	8004380 <__malloc_lock>
 80042b0:	f8d8 3000 	ldr.w	r3, [r8]
 80042b4:	461c      	mov	r4, r3
 80042b6:	bb5c      	cbnz	r4, 8004310 <_malloc_r+0x90>
 80042b8:	4629      	mov	r1, r5
 80042ba:	4638      	mov	r0, r7
 80042bc:	f7ff ffc0 	bl	8004240 <sbrk_aligned>
 80042c0:	1c43      	adds	r3, r0, #1
 80042c2:	4604      	mov	r4, r0
 80042c4:	d155      	bne.n	8004372 <_malloc_r+0xf2>
 80042c6:	f8d8 4000 	ldr.w	r4, [r8]
 80042ca:	4626      	mov	r6, r4
 80042cc:	2e00      	cmp	r6, #0
 80042ce:	d145      	bne.n	800435c <_malloc_r+0xdc>
 80042d0:	2c00      	cmp	r4, #0
 80042d2:	d048      	beq.n	8004366 <_malloc_r+0xe6>
 80042d4:	6823      	ldr	r3, [r4, #0]
 80042d6:	4631      	mov	r1, r6
 80042d8:	4638      	mov	r0, r7
 80042da:	eb04 0903 	add.w	r9, r4, r3
 80042de:	f000 fc73 	bl	8004bc8 <_sbrk_r>
 80042e2:	4581      	cmp	r9, r0
 80042e4:	d13f      	bne.n	8004366 <_malloc_r+0xe6>
 80042e6:	6821      	ldr	r1, [r4, #0]
 80042e8:	1a6d      	subs	r5, r5, r1
 80042ea:	4629      	mov	r1, r5
 80042ec:	4638      	mov	r0, r7
 80042ee:	f7ff ffa7 	bl	8004240 <sbrk_aligned>
 80042f2:	3001      	adds	r0, #1
 80042f4:	d037      	beq.n	8004366 <_malloc_r+0xe6>
 80042f6:	6823      	ldr	r3, [r4, #0]
 80042f8:	442b      	add	r3, r5
 80042fa:	6023      	str	r3, [r4, #0]
 80042fc:	f8d8 3000 	ldr.w	r3, [r8]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d038      	beq.n	8004376 <_malloc_r+0xf6>
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	42a2      	cmp	r2, r4
 8004308:	d12b      	bne.n	8004362 <_malloc_r+0xe2>
 800430a:	2200      	movs	r2, #0
 800430c:	605a      	str	r2, [r3, #4]
 800430e:	e00f      	b.n	8004330 <_malloc_r+0xb0>
 8004310:	6822      	ldr	r2, [r4, #0]
 8004312:	1b52      	subs	r2, r2, r5
 8004314:	d41f      	bmi.n	8004356 <_malloc_r+0xd6>
 8004316:	2a0b      	cmp	r2, #11
 8004318:	d917      	bls.n	800434a <_malloc_r+0xca>
 800431a:	1961      	adds	r1, r4, r5
 800431c:	42a3      	cmp	r3, r4
 800431e:	6025      	str	r5, [r4, #0]
 8004320:	bf18      	it	ne
 8004322:	6059      	strne	r1, [r3, #4]
 8004324:	6863      	ldr	r3, [r4, #4]
 8004326:	bf08      	it	eq
 8004328:	f8c8 1000 	streq.w	r1, [r8]
 800432c:	5162      	str	r2, [r4, r5]
 800432e:	604b      	str	r3, [r1, #4]
 8004330:	4638      	mov	r0, r7
 8004332:	f104 060b 	add.w	r6, r4, #11
 8004336:	f000 f829 	bl	800438c <__malloc_unlock>
 800433a:	f026 0607 	bic.w	r6, r6, #7
 800433e:	1d23      	adds	r3, r4, #4
 8004340:	1af2      	subs	r2, r6, r3
 8004342:	d0ae      	beq.n	80042a2 <_malloc_r+0x22>
 8004344:	1b9b      	subs	r3, r3, r6
 8004346:	50a3      	str	r3, [r4, r2]
 8004348:	e7ab      	b.n	80042a2 <_malloc_r+0x22>
 800434a:	42a3      	cmp	r3, r4
 800434c:	6862      	ldr	r2, [r4, #4]
 800434e:	d1dd      	bne.n	800430c <_malloc_r+0x8c>
 8004350:	f8c8 2000 	str.w	r2, [r8]
 8004354:	e7ec      	b.n	8004330 <_malloc_r+0xb0>
 8004356:	4623      	mov	r3, r4
 8004358:	6864      	ldr	r4, [r4, #4]
 800435a:	e7ac      	b.n	80042b6 <_malloc_r+0x36>
 800435c:	4634      	mov	r4, r6
 800435e:	6876      	ldr	r6, [r6, #4]
 8004360:	e7b4      	b.n	80042cc <_malloc_r+0x4c>
 8004362:	4613      	mov	r3, r2
 8004364:	e7cc      	b.n	8004300 <_malloc_r+0x80>
 8004366:	230c      	movs	r3, #12
 8004368:	603b      	str	r3, [r7, #0]
 800436a:	4638      	mov	r0, r7
 800436c:	f000 f80e 	bl	800438c <__malloc_unlock>
 8004370:	e797      	b.n	80042a2 <_malloc_r+0x22>
 8004372:	6025      	str	r5, [r4, #0]
 8004374:	e7dc      	b.n	8004330 <_malloc_r+0xb0>
 8004376:	605b      	str	r3, [r3, #4]
 8004378:	deff      	udf	#255	; 0xff
 800437a:	bf00      	nop
 800437c:	200003b0 	.word	0x200003b0

08004380 <__malloc_lock>:
 8004380:	4801      	ldr	r0, [pc, #4]	; (8004388 <__malloc_lock+0x8>)
 8004382:	f7ff bf0e 	b.w	80041a2 <__retarget_lock_acquire_recursive>
 8004386:	bf00      	nop
 8004388:	200003ac 	.word	0x200003ac

0800438c <__malloc_unlock>:
 800438c:	4801      	ldr	r0, [pc, #4]	; (8004394 <__malloc_unlock+0x8>)
 800438e:	f7ff bf09 	b.w	80041a4 <__retarget_lock_release_recursive>
 8004392:	bf00      	nop
 8004394:	200003ac 	.word	0x200003ac

08004398 <__sfputc_r>:
 8004398:	6893      	ldr	r3, [r2, #8]
 800439a:	3b01      	subs	r3, #1
 800439c:	2b00      	cmp	r3, #0
 800439e:	b410      	push	{r4}
 80043a0:	6093      	str	r3, [r2, #8]
 80043a2:	da08      	bge.n	80043b6 <__sfputc_r+0x1e>
 80043a4:	6994      	ldr	r4, [r2, #24]
 80043a6:	42a3      	cmp	r3, r4
 80043a8:	db01      	blt.n	80043ae <__sfputc_r+0x16>
 80043aa:	290a      	cmp	r1, #10
 80043ac:	d103      	bne.n	80043b6 <__sfputc_r+0x1e>
 80043ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043b2:	f000 bb73 	b.w	8004a9c <__swbuf_r>
 80043b6:	6813      	ldr	r3, [r2, #0]
 80043b8:	1c58      	adds	r0, r3, #1
 80043ba:	6010      	str	r0, [r2, #0]
 80043bc:	7019      	strb	r1, [r3, #0]
 80043be:	4608      	mov	r0, r1
 80043c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <__sfputs_r>:
 80043c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c8:	4606      	mov	r6, r0
 80043ca:	460f      	mov	r7, r1
 80043cc:	4614      	mov	r4, r2
 80043ce:	18d5      	adds	r5, r2, r3
 80043d0:	42ac      	cmp	r4, r5
 80043d2:	d101      	bne.n	80043d8 <__sfputs_r+0x12>
 80043d4:	2000      	movs	r0, #0
 80043d6:	e007      	b.n	80043e8 <__sfputs_r+0x22>
 80043d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043dc:	463a      	mov	r2, r7
 80043de:	4630      	mov	r0, r6
 80043e0:	f7ff ffda 	bl	8004398 <__sfputc_r>
 80043e4:	1c43      	adds	r3, r0, #1
 80043e6:	d1f3      	bne.n	80043d0 <__sfputs_r+0xa>
 80043e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080043ec <_vfiprintf_r>:
 80043ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043f0:	460d      	mov	r5, r1
 80043f2:	b09d      	sub	sp, #116	; 0x74
 80043f4:	4614      	mov	r4, r2
 80043f6:	4698      	mov	r8, r3
 80043f8:	4606      	mov	r6, r0
 80043fa:	b118      	cbz	r0, 8004404 <_vfiprintf_r+0x18>
 80043fc:	6a03      	ldr	r3, [r0, #32]
 80043fe:	b90b      	cbnz	r3, 8004404 <_vfiprintf_r+0x18>
 8004400:	f7ff fdca 	bl	8003f98 <__sinit>
 8004404:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004406:	07d9      	lsls	r1, r3, #31
 8004408:	d405      	bmi.n	8004416 <_vfiprintf_r+0x2a>
 800440a:	89ab      	ldrh	r3, [r5, #12]
 800440c:	059a      	lsls	r2, r3, #22
 800440e:	d402      	bmi.n	8004416 <_vfiprintf_r+0x2a>
 8004410:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004412:	f7ff fec6 	bl	80041a2 <__retarget_lock_acquire_recursive>
 8004416:	89ab      	ldrh	r3, [r5, #12]
 8004418:	071b      	lsls	r3, r3, #28
 800441a:	d501      	bpl.n	8004420 <_vfiprintf_r+0x34>
 800441c:	692b      	ldr	r3, [r5, #16]
 800441e:	b99b      	cbnz	r3, 8004448 <_vfiprintf_r+0x5c>
 8004420:	4629      	mov	r1, r5
 8004422:	4630      	mov	r0, r6
 8004424:	f000 fb78 	bl	8004b18 <__swsetup_r>
 8004428:	b170      	cbz	r0, 8004448 <_vfiprintf_r+0x5c>
 800442a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800442c:	07dc      	lsls	r4, r3, #31
 800442e:	d504      	bpl.n	800443a <_vfiprintf_r+0x4e>
 8004430:	f04f 30ff 	mov.w	r0, #4294967295
 8004434:	b01d      	add	sp, #116	; 0x74
 8004436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800443a:	89ab      	ldrh	r3, [r5, #12]
 800443c:	0598      	lsls	r0, r3, #22
 800443e:	d4f7      	bmi.n	8004430 <_vfiprintf_r+0x44>
 8004440:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004442:	f7ff feaf 	bl	80041a4 <__retarget_lock_release_recursive>
 8004446:	e7f3      	b.n	8004430 <_vfiprintf_r+0x44>
 8004448:	2300      	movs	r3, #0
 800444a:	9309      	str	r3, [sp, #36]	; 0x24
 800444c:	2320      	movs	r3, #32
 800444e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004452:	f8cd 800c 	str.w	r8, [sp, #12]
 8004456:	2330      	movs	r3, #48	; 0x30
 8004458:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800460c <_vfiprintf_r+0x220>
 800445c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004460:	f04f 0901 	mov.w	r9, #1
 8004464:	4623      	mov	r3, r4
 8004466:	469a      	mov	sl, r3
 8004468:	f813 2b01 	ldrb.w	r2, [r3], #1
 800446c:	b10a      	cbz	r2, 8004472 <_vfiprintf_r+0x86>
 800446e:	2a25      	cmp	r2, #37	; 0x25
 8004470:	d1f9      	bne.n	8004466 <_vfiprintf_r+0x7a>
 8004472:	ebba 0b04 	subs.w	fp, sl, r4
 8004476:	d00b      	beq.n	8004490 <_vfiprintf_r+0xa4>
 8004478:	465b      	mov	r3, fp
 800447a:	4622      	mov	r2, r4
 800447c:	4629      	mov	r1, r5
 800447e:	4630      	mov	r0, r6
 8004480:	f7ff ffa1 	bl	80043c6 <__sfputs_r>
 8004484:	3001      	adds	r0, #1
 8004486:	f000 80a9 	beq.w	80045dc <_vfiprintf_r+0x1f0>
 800448a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800448c:	445a      	add	r2, fp
 800448e:	9209      	str	r2, [sp, #36]	; 0x24
 8004490:	f89a 3000 	ldrb.w	r3, [sl]
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 80a1 	beq.w	80045dc <_vfiprintf_r+0x1f0>
 800449a:	2300      	movs	r3, #0
 800449c:	f04f 32ff 	mov.w	r2, #4294967295
 80044a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044a4:	f10a 0a01 	add.w	sl, sl, #1
 80044a8:	9304      	str	r3, [sp, #16]
 80044aa:	9307      	str	r3, [sp, #28]
 80044ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044b0:	931a      	str	r3, [sp, #104]	; 0x68
 80044b2:	4654      	mov	r4, sl
 80044b4:	2205      	movs	r2, #5
 80044b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044ba:	4854      	ldr	r0, [pc, #336]	; (800460c <_vfiprintf_r+0x220>)
 80044bc:	f7fb fe90 	bl	80001e0 <memchr>
 80044c0:	9a04      	ldr	r2, [sp, #16]
 80044c2:	b9d8      	cbnz	r0, 80044fc <_vfiprintf_r+0x110>
 80044c4:	06d1      	lsls	r1, r2, #27
 80044c6:	bf44      	itt	mi
 80044c8:	2320      	movmi	r3, #32
 80044ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044ce:	0713      	lsls	r3, r2, #28
 80044d0:	bf44      	itt	mi
 80044d2:	232b      	movmi	r3, #43	; 0x2b
 80044d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044d8:	f89a 3000 	ldrb.w	r3, [sl]
 80044dc:	2b2a      	cmp	r3, #42	; 0x2a
 80044de:	d015      	beq.n	800450c <_vfiprintf_r+0x120>
 80044e0:	9a07      	ldr	r2, [sp, #28]
 80044e2:	4654      	mov	r4, sl
 80044e4:	2000      	movs	r0, #0
 80044e6:	f04f 0c0a 	mov.w	ip, #10
 80044ea:	4621      	mov	r1, r4
 80044ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044f0:	3b30      	subs	r3, #48	; 0x30
 80044f2:	2b09      	cmp	r3, #9
 80044f4:	d94d      	bls.n	8004592 <_vfiprintf_r+0x1a6>
 80044f6:	b1b0      	cbz	r0, 8004526 <_vfiprintf_r+0x13a>
 80044f8:	9207      	str	r2, [sp, #28]
 80044fa:	e014      	b.n	8004526 <_vfiprintf_r+0x13a>
 80044fc:	eba0 0308 	sub.w	r3, r0, r8
 8004500:	fa09 f303 	lsl.w	r3, r9, r3
 8004504:	4313      	orrs	r3, r2
 8004506:	9304      	str	r3, [sp, #16]
 8004508:	46a2      	mov	sl, r4
 800450a:	e7d2      	b.n	80044b2 <_vfiprintf_r+0xc6>
 800450c:	9b03      	ldr	r3, [sp, #12]
 800450e:	1d19      	adds	r1, r3, #4
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	9103      	str	r1, [sp, #12]
 8004514:	2b00      	cmp	r3, #0
 8004516:	bfbb      	ittet	lt
 8004518:	425b      	neglt	r3, r3
 800451a:	f042 0202 	orrlt.w	r2, r2, #2
 800451e:	9307      	strge	r3, [sp, #28]
 8004520:	9307      	strlt	r3, [sp, #28]
 8004522:	bfb8      	it	lt
 8004524:	9204      	strlt	r2, [sp, #16]
 8004526:	7823      	ldrb	r3, [r4, #0]
 8004528:	2b2e      	cmp	r3, #46	; 0x2e
 800452a:	d10c      	bne.n	8004546 <_vfiprintf_r+0x15a>
 800452c:	7863      	ldrb	r3, [r4, #1]
 800452e:	2b2a      	cmp	r3, #42	; 0x2a
 8004530:	d134      	bne.n	800459c <_vfiprintf_r+0x1b0>
 8004532:	9b03      	ldr	r3, [sp, #12]
 8004534:	1d1a      	adds	r2, r3, #4
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	9203      	str	r2, [sp, #12]
 800453a:	2b00      	cmp	r3, #0
 800453c:	bfb8      	it	lt
 800453e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004542:	3402      	adds	r4, #2
 8004544:	9305      	str	r3, [sp, #20]
 8004546:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800461c <_vfiprintf_r+0x230>
 800454a:	7821      	ldrb	r1, [r4, #0]
 800454c:	2203      	movs	r2, #3
 800454e:	4650      	mov	r0, sl
 8004550:	f7fb fe46 	bl	80001e0 <memchr>
 8004554:	b138      	cbz	r0, 8004566 <_vfiprintf_r+0x17a>
 8004556:	9b04      	ldr	r3, [sp, #16]
 8004558:	eba0 000a 	sub.w	r0, r0, sl
 800455c:	2240      	movs	r2, #64	; 0x40
 800455e:	4082      	lsls	r2, r0
 8004560:	4313      	orrs	r3, r2
 8004562:	3401      	adds	r4, #1
 8004564:	9304      	str	r3, [sp, #16]
 8004566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800456a:	4829      	ldr	r0, [pc, #164]	; (8004610 <_vfiprintf_r+0x224>)
 800456c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004570:	2206      	movs	r2, #6
 8004572:	f7fb fe35 	bl	80001e0 <memchr>
 8004576:	2800      	cmp	r0, #0
 8004578:	d03f      	beq.n	80045fa <_vfiprintf_r+0x20e>
 800457a:	4b26      	ldr	r3, [pc, #152]	; (8004614 <_vfiprintf_r+0x228>)
 800457c:	bb1b      	cbnz	r3, 80045c6 <_vfiprintf_r+0x1da>
 800457e:	9b03      	ldr	r3, [sp, #12]
 8004580:	3307      	adds	r3, #7
 8004582:	f023 0307 	bic.w	r3, r3, #7
 8004586:	3308      	adds	r3, #8
 8004588:	9303      	str	r3, [sp, #12]
 800458a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800458c:	443b      	add	r3, r7
 800458e:	9309      	str	r3, [sp, #36]	; 0x24
 8004590:	e768      	b.n	8004464 <_vfiprintf_r+0x78>
 8004592:	fb0c 3202 	mla	r2, ip, r2, r3
 8004596:	460c      	mov	r4, r1
 8004598:	2001      	movs	r0, #1
 800459a:	e7a6      	b.n	80044ea <_vfiprintf_r+0xfe>
 800459c:	2300      	movs	r3, #0
 800459e:	3401      	adds	r4, #1
 80045a0:	9305      	str	r3, [sp, #20]
 80045a2:	4619      	mov	r1, r3
 80045a4:	f04f 0c0a 	mov.w	ip, #10
 80045a8:	4620      	mov	r0, r4
 80045aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045ae:	3a30      	subs	r2, #48	; 0x30
 80045b0:	2a09      	cmp	r2, #9
 80045b2:	d903      	bls.n	80045bc <_vfiprintf_r+0x1d0>
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0c6      	beq.n	8004546 <_vfiprintf_r+0x15a>
 80045b8:	9105      	str	r1, [sp, #20]
 80045ba:	e7c4      	b.n	8004546 <_vfiprintf_r+0x15a>
 80045bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80045c0:	4604      	mov	r4, r0
 80045c2:	2301      	movs	r3, #1
 80045c4:	e7f0      	b.n	80045a8 <_vfiprintf_r+0x1bc>
 80045c6:	ab03      	add	r3, sp, #12
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	462a      	mov	r2, r5
 80045cc:	4b12      	ldr	r3, [pc, #72]	; (8004618 <_vfiprintf_r+0x22c>)
 80045ce:	a904      	add	r1, sp, #16
 80045d0:	4630      	mov	r0, r6
 80045d2:	f3af 8000 	nop.w
 80045d6:	4607      	mov	r7, r0
 80045d8:	1c78      	adds	r0, r7, #1
 80045da:	d1d6      	bne.n	800458a <_vfiprintf_r+0x19e>
 80045dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045de:	07d9      	lsls	r1, r3, #31
 80045e0:	d405      	bmi.n	80045ee <_vfiprintf_r+0x202>
 80045e2:	89ab      	ldrh	r3, [r5, #12]
 80045e4:	059a      	lsls	r2, r3, #22
 80045e6:	d402      	bmi.n	80045ee <_vfiprintf_r+0x202>
 80045e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045ea:	f7ff fddb 	bl	80041a4 <__retarget_lock_release_recursive>
 80045ee:	89ab      	ldrh	r3, [r5, #12]
 80045f0:	065b      	lsls	r3, r3, #25
 80045f2:	f53f af1d 	bmi.w	8004430 <_vfiprintf_r+0x44>
 80045f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045f8:	e71c      	b.n	8004434 <_vfiprintf_r+0x48>
 80045fa:	ab03      	add	r3, sp, #12
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	462a      	mov	r2, r5
 8004600:	4b05      	ldr	r3, [pc, #20]	; (8004618 <_vfiprintf_r+0x22c>)
 8004602:	a904      	add	r1, sp, #16
 8004604:	4630      	mov	r0, r6
 8004606:	f000 f879 	bl	80046fc <_printf_i>
 800460a:	e7e4      	b.n	80045d6 <_vfiprintf_r+0x1ea>
 800460c:	08004d24 	.word	0x08004d24
 8004610:	08004d2e 	.word	0x08004d2e
 8004614:	00000000 	.word	0x00000000
 8004618:	080043c7 	.word	0x080043c7
 800461c:	08004d2a 	.word	0x08004d2a

08004620 <_printf_common>:
 8004620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004624:	4616      	mov	r6, r2
 8004626:	4699      	mov	r9, r3
 8004628:	688a      	ldr	r2, [r1, #8]
 800462a:	690b      	ldr	r3, [r1, #16]
 800462c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004630:	4293      	cmp	r3, r2
 8004632:	bfb8      	it	lt
 8004634:	4613      	movlt	r3, r2
 8004636:	6033      	str	r3, [r6, #0]
 8004638:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800463c:	4607      	mov	r7, r0
 800463e:	460c      	mov	r4, r1
 8004640:	b10a      	cbz	r2, 8004646 <_printf_common+0x26>
 8004642:	3301      	adds	r3, #1
 8004644:	6033      	str	r3, [r6, #0]
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	0699      	lsls	r1, r3, #26
 800464a:	bf42      	ittt	mi
 800464c:	6833      	ldrmi	r3, [r6, #0]
 800464e:	3302      	addmi	r3, #2
 8004650:	6033      	strmi	r3, [r6, #0]
 8004652:	6825      	ldr	r5, [r4, #0]
 8004654:	f015 0506 	ands.w	r5, r5, #6
 8004658:	d106      	bne.n	8004668 <_printf_common+0x48>
 800465a:	f104 0a19 	add.w	sl, r4, #25
 800465e:	68e3      	ldr	r3, [r4, #12]
 8004660:	6832      	ldr	r2, [r6, #0]
 8004662:	1a9b      	subs	r3, r3, r2
 8004664:	42ab      	cmp	r3, r5
 8004666:	dc26      	bgt.n	80046b6 <_printf_common+0x96>
 8004668:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800466c:	1e13      	subs	r3, r2, #0
 800466e:	6822      	ldr	r2, [r4, #0]
 8004670:	bf18      	it	ne
 8004672:	2301      	movne	r3, #1
 8004674:	0692      	lsls	r2, r2, #26
 8004676:	d42b      	bmi.n	80046d0 <_printf_common+0xb0>
 8004678:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800467c:	4649      	mov	r1, r9
 800467e:	4638      	mov	r0, r7
 8004680:	47c0      	blx	r8
 8004682:	3001      	adds	r0, #1
 8004684:	d01e      	beq.n	80046c4 <_printf_common+0xa4>
 8004686:	6823      	ldr	r3, [r4, #0]
 8004688:	6922      	ldr	r2, [r4, #16]
 800468a:	f003 0306 	and.w	r3, r3, #6
 800468e:	2b04      	cmp	r3, #4
 8004690:	bf02      	ittt	eq
 8004692:	68e5      	ldreq	r5, [r4, #12]
 8004694:	6833      	ldreq	r3, [r6, #0]
 8004696:	1aed      	subeq	r5, r5, r3
 8004698:	68a3      	ldr	r3, [r4, #8]
 800469a:	bf0c      	ite	eq
 800469c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046a0:	2500      	movne	r5, #0
 80046a2:	4293      	cmp	r3, r2
 80046a4:	bfc4      	itt	gt
 80046a6:	1a9b      	subgt	r3, r3, r2
 80046a8:	18ed      	addgt	r5, r5, r3
 80046aa:	2600      	movs	r6, #0
 80046ac:	341a      	adds	r4, #26
 80046ae:	42b5      	cmp	r5, r6
 80046b0:	d11a      	bne.n	80046e8 <_printf_common+0xc8>
 80046b2:	2000      	movs	r0, #0
 80046b4:	e008      	b.n	80046c8 <_printf_common+0xa8>
 80046b6:	2301      	movs	r3, #1
 80046b8:	4652      	mov	r2, sl
 80046ba:	4649      	mov	r1, r9
 80046bc:	4638      	mov	r0, r7
 80046be:	47c0      	blx	r8
 80046c0:	3001      	adds	r0, #1
 80046c2:	d103      	bne.n	80046cc <_printf_common+0xac>
 80046c4:	f04f 30ff 	mov.w	r0, #4294967295
 80046c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046cc:	3501      	adds	r5, #1
 80046ce:	e7c6      	b.n	800465e <_printf_common+0x3e>
 80046d0:	18e1      	adds	r1, r4, r3
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	2030      	movs	r0, #48	; 0x30
 80046d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046da:	4422      	add	r2, r4
 80046dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046e4:	3302      	adds	r3, #2
 80046e6:	e7c7      	b.n	8004678 <_printf_common+0x58>
 80046e8:	2301      	movs	r3, #1
 80046ea:	4622      	mov	r2, r4
 80046ec:	4649      	mov	r1, r9
 80046ee:	4638      	mov	r0, r7
 80046f0:	47c0      	blx	r8
 80046f2:	3001      	adds	r0, #1
 80046f4:	d0e6      	beq.n	80046c4 <_printf_common+0xa4>
 80046f6:	3601      	adds	r6, #1
 80046f8:	e7d9      	b.n	80046ae <_printf_common+0x8e>
	...

080046fc <_printf_i>:
 80046fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004700:	7e0f      	ldrb	r7, [r1, #24]
 8004702:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004704:	2f78      	cmp	r7, #120	; 0x78
 8004706:	4691      	mov	r9, r2
 8004708:	4680      	mov	r8, r0
 800470a:	460c      	mov	r4, r1
 800470c:	469a      	mov	sl, r3
 800470e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004712:	d807      	bhi.n	8004724 <_printf_i+0x28>
 8004714:	2f62      	cmp	r7, #98	; 0x62
 8004716:	d80a      	bhi.n	800472e <_printf_i+0x32>
 8004718:	2f00      	cmp	r7, #0
 800471a:	f000 80d4 	beq.w	80048c6 <_printf_i+0x1ca>
 800471e:	2f58      	cmp	r7, #88	; 0x58
 8004720:	f000 80c0 	beq.w	80048a4 <_printf_i+0x1a8>
 8004724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004728:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800472c:	e03a      	b.n	80047a4 <_printf_i+0xa8>
 800472e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004732:	2b15      	cmp	r3, #21
 8004734:	d8f6      	bhi.n	8004724 <_printf_i+0x28>
 8004736:	a101      	add	r1, pc, #4	; (adr r1, 800473c <_printf_i+0x40>)
 8004738:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800473c:	08004795 	.word	0x08004795
 8004740:	080047a9 	.word	0x080047a9
 8004744:	08004725 	.word	0x08004725
 8004748:	08004725 	.word	0x08004725
 800474c:	08004725 	.word	0x08004725
 8004750:	08004725 	.word	0x08004725
 8004754:	080047a9 	.word	0x080047a9
 8004758:	08004725 	.word	0x08004725
 800475c:	08004725 	.word	0x08004725
 8004760:	08004725 	.word	0x08004725
 8004764:	08004725 	.word	0x08004725
 8004768:	080048ad 	.word	0x080048ad
 800476c:	080047d5 	.word	0x080047d5
 8004770:	08004867 	.word	0x08004867
 8004774:	08004725 	.word	0x08004725
 8004778:	08004725 	.word	0x08004725
 800477c:	080048cf 	.word	0x080048cf
 8004780:	08004725 	.word	0x08004725
 8004784:	080047d5 	.word	0x080047d5
 8004788:	08004725 	.word	0x08004725
 800478c:	08004725 	.word	0x08004725
 8004790:	0800486f 	.word	0x0800486f
 8004794:	682b      	ldr	r3, [r5, #0]
 8004796:	1d1a      	adds	r2, r3, #4
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	602a      	str	r2, [r5, #0]
 800479c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047a4:	2301      	movs	r3, #1
 80047a6:	e09f      	b.n	80048e8 <_printf_i+0x1ec>
 80047a8:	6820      	ldr	r0, [r4, #0]
 80047aa:	682b      	ldr	r3, [r5, #0]
 80047ac:	0607      	lsls	r7, r0, #24
 80047ae:	f103 0104 	add.w	r1, r3, #4
 80047b2:	6029      	str	r1, [r5, #0]
 80047b4:	d501      	bpl.n	80047ba <_printf_i+0xbe>
 80047b6:	681e      	ldr	r6, [r3, #0]
 80047b8:	e003      	b.n	80047c2 <_printf_i+0xc6>
 80047ba:	0646      	lsls	r6, r0, #25
 80047bc:	d5fb      	bpl.n	80047b6 <_printf_i+0xba>
 80047be:	f9b3 6000 	ldrsh.w	r6, [r3]
 80047c2:	2e00      	cmp	r6, #0
 80047c4:	da03      	bge.n	80047ce <_printf_i+0xd2>
 80047c6:	232d      	movs	r3, #45	; 0x2d
 80047c8:	4276      	negs	r6, r6
 80047ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047ce:	485a      	ldr	r0, [pc, #360]	; (8004938 <_printf_i+0x23c>)
 80047d0:	230a      	movs	r3, #10
 80047d2:	e012      	b.n	80047fa <_printf_i+0xfe>
 80047d4:	682b      	ldr	r3, [r5, #0]
 80047d6:	6820      	ldr	r0, [r4, #0]
 80047d8:	1d19      	adds	r1, r3, #4
 80047da:	6029      	str	r1, [r5, #0]
 80047dc:	0605      	lsls	r5, r0, #24
 80047de:	d501      	bpl.n	80047e4 <_printf_i+0xe8>
 80047e0:	681e      	ldr	r6, [r3, #0]
 80047e2:	e002      	b.n	80047ea <_printf_i+0xee>
 80047e4:	0641      	lsls	r1, r0, #25
 80047e6:	d5fb      	bpl.n	80047e0 <_printf_i+0xe4>
 80047e8:	881e      	ldrh	r6, [r3, #0]
 80047ea:	4853      	ldr	r0, [pc, #332]	; (8004938 <_printf_i+0x23c>)
 80047ec:	2f6f      	cmp	r7, #111	; 0x6f
 80047ee:	bf0c      	ite	eq
 80047f0:	2308      	moveq	r3, #8
 80047f2:	230a      	movne	r3, #10
 80047f4:	2100      	movs	r1, #0
 80047f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047fa:	6865      	ldr	r5, [r4, #4]
 80047fc:	60a5      	str	r5, [r4, #8]
 80047fe:	2d00      	cmp	r5, #0
 8004800:	bfa2      	ittt	ge
 8004802:	6821      	ldrge	r1, [r4, #0]
 8004804:	f021 0104 	bicge.w	r1, r1, #4
 8004808:	6021      	strge	r1, [r4, #0]
 800480a:	b90e      	cbnz	r6, 8004810 <_printf_i+0x114>
 800480c:	2d00      	cmp	r5, #0
 800480e:	d04b      	beq.n	80048a8 <_printf_i+0x1ac>
 8004810:	4615      	mov	r5, r2
 8004812:	fbb6 f1f3 	udiv	r1, r6, r3
 8004816:	fb03 6711 	mls	r7, r3, r1, r6
 800481a:	5dc7      	ldrb	r7, [r0, r7]
 800481c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004820:	4637      	mov	r7, r6
 8004822:	42bb      	cmp	r3, r7
 8004824:	460e      	mov	r6, r1
 8004826:	d9f4      	bls.n	8004812 <_printf_i+0x116>
 8004828:	2b08      	cmp	r3, #8
 800482a:	d10b      	bne.n	8004844 <_printf_i+0x148>
 800482c:	6823      	ldr	r3, [r4, #0]
 800482e:	07de      	lsls	r6, r3, #31
 8004830:	d508      	bpl.n	8004844 <_printf_i+0x148>
 8004832:	6923      	ldr	r3, [r4, #16]
 8004834:	6861      	ldr	r1, [r4, #4]
 8004836:	4299      	cmp	r1, r3
 8004838:	bfde      	ittt	le
 800483a:	2330      	movle	r3, #48	; 0x30
 800483c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004840:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004844:	1b52      	subs	r2, r2, r5
 8004846:	6122      	str	r2, [r4, #16]
 8004848:	f8cd a000 	str.w	sl, [sp]
 800484c:	464b      	mov	r3, r9
 800484e:	aa03      	add	r2, sp, #12
 8004850:	4621      	mov	r1, r4
 8004852:	4640      	mov	r0, r8
 8004854:	f7ff fee4 	bl	8004620 <_printf_common>
 8004858:	3001      	adds	r0, #1
 800485a:	d14a      	bne.n	80048f2 <_printf_i+0x1f6>
 800485c:	f04f 30ff 	mov.w	r0, #4294967295
 8004860:	b004      	add	sp, #16
 8004862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004866:	6823      	ldr	r3, [r4, #0]
 8004868:	f043 0320 	orr.w	r3, r3, #32
 800486c:	6023      	str	r3, [r4, #0]
 800486e:	4833      	ldr	r0, [pc, #204]	; (800493c <_printf_i+0x240>)
 8004870:	2778      	movs	r7, #120	; 0x78
 8004872:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	6829      	ldr	r1, [r5, #0]
 800487a:	061f      	lsls	r7, r3, #24
 800487c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004880:	d402      	bmi.n	8004888 <_printf_i+0x18c>
 8004882:	065f      	lsls	r7, r3, #25
 8004884:	bf48      	it	mi
 8004886:	b2b6      	uxthmi	r6, r6
 8004888:	07df      	lsls	r7, r3, #31
 800488a:	bf48      	it	mi
 800488c:	f043 0320 	orrmi.w	r3, r3, #32
 8004890:	6029      	str	r1, [r5, #0]
 8004892:	bf48      	it	mi
 8004894:	6023      	strmi	r3, [r4, #0]
 8004896:	b91e      	cbnz	r6, 80048a0 <_printf_i+0x1a4>
 8004898:	6823      	ldr	r3, [r4, #0]
 800489a:	f023 0320 	bic.w	r3, r3, #32
 800489e:	6023      	str	r3, [r4, #0]
 80048a0:	2310      	movs	r3, #16
 80048a2:	e7a7      	b.n	80047f4 <_printf_i+0xf8>
 80048a4:	4824      	ldr	r0, [pc, #144]	; (8004938 <_printf_i+0x23c>)
 80048a6:	e7e4      	b.n	8004872 <_printf_i+0x176>
 80048a8:	4615      	mov	r5, r2
 80048aa:	e7bd      	b.n	8004828 <_printf_i+0x12c>
 80048ac:	682b      	ldr	r3, [r5, #0]
 80048ae:	6826      	ldr	r6, [r4, #0]
 80048b0:	6961      	ldr	r1, [r4, #20]
 80048b2:	1d18      	adds	r0, r3, #4
 80048b4:	6028      	str	r0, [r5, #0]
 80048b6:	0635      	lsls	r5, r6, #24
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	d501      	bpl.n	80048c0 <_printf_i+0x1c4>
 80048bc:	6019      	str	r1, [r3, #0]
 80048be:	e002      	b.n	80048c6 <_printf_i+0x1ca>
 80048c0:	0670      	lsls	r0, r6, #25
 80048c2:	d5fb      	bpl.n	80048bc <_printf_i+0x1c0>
 80048c4:	8019      	strh	r1, [r3, #0]
 80048c6:	2300      	movs	r3, #0
 80048c8:	6123      	str	r3, [r4, #16]
 80048ca:	4615      	mov	r5, r2
 80048cc:	e7bc      	b.n	8004848 <_printf_i+0x14c>
 80048ce:	682b      	ldr	r3, [r5, #0]
 80048d0:	1d1a      	adds	r2, r3, #4
 80048d2:	602a      	str	r2, [r5, #0]
 80048d4:	681d      	ldr	r5, [r3, #0]
 80048d6:	6862      	ldr	r2, [r4, #4]
 80048d8:	2100      	movs	r1, #0
 80048da:	4628      	mov	r0, r5
 80048dc:	f7fb fc80 	bl	80001e0 <memchr>
 80048e0:	b108      	cbz	r0, 80048e6 <_printf_i+0x1ea>
 80048e2:	1b40      	subs	r0, r0, r5
 80048e4:	6060      	str	r0, [r4, #4]
 80048e6:	6863      	ldr	r3, [r4, #4]
 80048e8:	6123      	str	r3, [r4, #16]
 80048ea:	2300      	movs	r3, #0
 80048ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048f0:	e7aa      	b.n	8004848 <_printf_i+0x14c>
 80048f2:	6923      	ldr	r3, [r4, #16]
 80048f4:	462a      	mov	r2, r5
 80048f6:	4649      	mov	r1, r9
 80048f8:	4640      	mov	r0, r8
 80048fa:	47d0      	blx	sl
 80048fc:	3001      	adds	r0, #1
 80048fe:	d0ad      	beq.n	800485c <_printf_i+0x160>
 8004900:	6823      	ldr	r3, [r4, #0]
 8004902:	079b      	lsls	r3, r3, #30
 8004904:	d413      	bmi.n	800492e <_printf_i+0x232>
 8004906:	68e0      	ldr	r0, [r4, #12]
 8004908:	9b03      	ldr	r3, [sp, #12]
 800490a:	4298      	cmp	r0, r3
 800490c:	bfb8      	it	lt
 800490e:	4618      	movlt	r0, r3
 8004910:	e7a6      	b.n	8004860 <_printf_i+0x164>
 8004912:	2301      	movs	r3, #1
 8004914:	4632      	mov	r2, r6
 8004916:	4649      	mov	r1, r9
 8004918:	4640      	mov	r0, r8
 800491a:	47d0      	blx	sl
 800491c:	3001      	adds	r0, #1
 800491e:	d09d      	beq.n	800485c <_printf_i+0x160>
 8004920:	3501      	adds	r5, #1
 8004922:	68e3      	ldr	r3, [r4, #12]
 8004924:	9903      	ldr	r1, [sp, #12]
 8004926:	1a5b      	subs	r3, r3, r1
 8004928:	42ab      	cmp	r3, r5
 800492a:	dcf2      	bgt.n	8004912 <_printf_i+0x216>
 800492c:	e7eb      	b.n	8004906 <_printf_i+0x20a>
 800492e:	2500      	movs	r5, #0
 8004930:	f104 0619 	add.w	r6, r4, #25
 8004934:	e7f5      	b.n	8004922 <_printf_i+0x226>
 8004936:	bf00      	nop
 8004938:	08004d35 	.word	0x08004d35
 800493c:	08004d46 	.word	0x08004d46

08004940 <__sflush_r>:
 8004940:	898a      	ldrh	r2, [r1, #12]
 8004942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004946:	4605      	mov	r5, r0
 8004948:	0710      	lsls	r0, r2, #28
 800494a:	460c      	mov	r4, r1
 800494c:	d458      	bmi.n	8004a00 <__sflush_r+0xc0>
 800494e:	684b      	ldr	r3, [r1, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	dc05      	bgt.n	8004960 <__sflush_r+0x20>
 8004954:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004956:	2b00      	cmp	r3, #0
 8004958:	dc02      	bgt.n	8004960 <__sflush_r+0x20>
 800495a:	2000      	movs	r0, #0
 800495c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004960:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004962:	2e00      	cmp	r6, #0
 8004964:	d0f9      	beq.n	800495a <__sflush_r+0x1a>
 8004966:	2300      	movs	r3, #0
 8004968:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800496c:	682f      	ldr	r7, [r5, #0]
 800496e:	6a21      	ldr	r1, [r4, #32]
 8004970:	602b      	str	r3, [r5, #0]
 8004972:	d032      	beq.n	80049da <__sflush_r+0x9a>
 8004974:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004976:	89a3      	ldrh	r3, [r4, #12]
 8004978:	075a      	lsls	r2, r3, #29
 800497a:	d505      	bpl.n	8004988 <__sflush_r+0x48>
 800497c:	6863      	ldr	r3, [r4, #4]
 800497e:	1ac0      	subs	r0, r0, r3
 8004980:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004982:	b10b      	cbz	r3, 8004988 <__sflush_r+0x48>
 8004984:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004986:	1ac0      	subs	r0, r0, r3
 8004988:	2300      	movs	r3, #0
 800498a:	4602      	mov	r2, r0
 800498c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800498e:	6a21      	ldr	r1, [r4, #32]
 8004990:	4628      	mov	r0, r5
 8004992:	47b0      	blx	r6
 8004994:	1c43      	adds	r3, r0, #1
 8004996:	89a3      	ldrh	r3, [r4, #12]
 8004998:	d106      	bne.n	80049a8 <__sflush_r+0x68>
 800499a:	6829      	ldr	r1, [r5, #0]
 800499c:	291d      	cmp	r1, #29
 800499e:	d82b      	bhi.n	80049f8 <__sflush_r+0xb8>
 80049a0:	4a29      	ldr	r2, [pc, #164]	; (8004a48 <__sflush_r+0x108>)
 80049a2:	410a      	asrs	r2, r1
 80049a4:	07d6      	lsls	r6, r2, #31
 80049a6:	d427      	bmi.n	80049f8 <__sflush_r+0xb8>
 80049a8:	2200      	movs	r2, #0
 80049aa:	6062      	str	r2, [r4, #4]
 80049ac:	04d9      	lsls	r1, r3, #19
 80049ae:	6922      	ldr	r2, [r4, #16]
 80049b0:	6022      	str	r2, [r4, #0]
 80049b2:	d504      	bpl.n	80049be <__sflush_r+0x7e>
 80049b4:	1c42      	adds	r2, r0, #1
 80049b6:	d101      	bne.n	80049bc <__sflush_r+0x7c>
 80049b8:	682b      	ldr	r3, [r5, #0]
 80049ba:	b903      	cbnz	r3, 80049be <__sflush_r+0x7e>
 80049bc:	6560      	str	r0, [r4, #84]	; 0x54
 80049be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049c0:	602f      	str	r7, [r5, #0]
 80049c2:	2900      	cmp	r1, #0
 80049c4:	d0c9      	beq.n	800495a <__sflush_r+0x1a>
 80049c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049ca:	4299      	cmp	r1, r3
 80049cc:	d002      	beq.n	80049d4 <__sflush_r+0x94>
 80049ce:	4628      	mov	r0, r5
 80049d0:	f7ff fbea 	bl	80041a8 <_free_r>
 80049d4:	2000      	movs	r0, #0
 80049d6:	6360      	str	r0, [r4, #52]	; 0x34
 80049d8:	e7c0      	b.n	800495c <__sflush_r+0x1c>
 80049da:	2301      	movs	r3, #1
 80049dc:	4628      	mov	r0, r5
 80049de:	47b0      	blx	r6
 80049e0:	1c41      	adds	r1, r0, #1
 80049e2:	d1c8      	bne.n	8004976 <__sflush_r+0x36>
 80049e4:	682b      	ldr	r3, [r5, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0c5      	beq.n	8004976 <__sflush_r+0x36>
 80049ea:	2b1d      	cmp	r3, #29
 80049ec:	d001      	beq.n	80049f2 <__sflush_r+0xb2>
 80049ee:	2b16      	cmp	r3, #22
 80049f0:	d101      	bne.n	80049f6 <__sflush_r+0xb6>
 80049f2:	602f      	str	r7, [r5, #0]
 80049f4:	e7b1      	b.n	800495a <__sflush_r+0x1a>
 80049f6:	89a3      	ldrh	r3, [r4, #12]
 80049f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049fc:	81a3      	strh	r3, [r4, #12]
 80049fe:	e7ad      	b.n	800495c <__sflush_r+0x1c>
 8004a00:	690f      	ldr	r7, [r1, #16]
 8004a02:	2f00      	cmp	r7, #0
 8004a04:	d0a9      	beq.n	800495a <__sflush_r+0x1a>
 8004a06:	0793      	lsls	r3, r2, #30
 8004a08:	680e      	ldr	r6, [r1, #0]
 8004a0a:	bf08      	it	eq
 8004a0c:	694b      	ldreq	r3, [r1, #20]
 8004a0e:	600f      	str	r7, [r1, #0]
 8004a10:	bf18      	it	ne
 8004a12:	2300      	movne	r3, #0
 8004a14:	eba6 0807 	sub.w	r8, r6, r7
 8004a18:	608b      	str	r3, [r1, #8]
 8004a1a:	f1b8 0f00 	cmp.w	r8, #0
 8004a1e:	dd9c      	ble.n	800495a <__sflush_r+0x1a>
 8004a20:	6a21      	ldr	r1, [r4, #32]
 8004a22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a24:	4643      	mov	r3, r8
 8004a26:	463a      	mov	r2, r7
 8004a28:	4628      	mov	r0, r5
 8004a2a:	47b0      	blx	r6
 8004a2c:	2800      	cmp	r0, #0
 8004a2e:	dc06      	bgt.n	8004a3e <__sflush_r+0xfe>
 8004a30:	89a3      	ldrh	r3, [r4, #12]
 8004a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a36:	81a3      	strh	r3, [r4, #12]
 8004a38:	f04f 30ff 	mov.w	r0, #4294967295
 8004a3c:	e78e      	b.n	800495c <__sflush_r+0x1c>
 8004a3e:	4407      	add	r7, r0
 8004a40:	eba8 0800 	sub.w	r8, r8, r0
 8004a44:	e7e9      	b.n	8004a1a <__sflush_r+0xda>
 8004a46:	bf00      	nop
 8004a48:	dfbffffe 	.word	0xdfbffffe

08004a4c <_fflush_r>:
 8004a4c:	b538      	push	{r3, r4, r5, lr}
 8004a4e:	690b      	ldr	r3, [r1, #16]
 8004a50:	4605      	mov	r5, r0
 8004a52:	460c      	mov	r4, r1
 8004a54:	b913      	cbnz	r3, 8004a5c <_fflush_r+0x10>
 8004a56:	2500      	movs	r5, #0
 8004a58:	4628      	mov	r0, r5
 8004a5a:	bd38      	pop	{r3, r4, r5, pc}
 8004a5c:	b118      	cbz	r0, 8004a66 <_fflush_r+0x1a>
 8004a5e:	6a03      	ldr	r3, [r0, #32]
 8004a60:	b90b      	cbnz	r3, 8004a66 <_fflush_r+0x1a>
 8004a62:	f7ff fa99 	bl	8003f98 <__sinit>
 8004a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0f3      	beq.n	8004a56 <_fflush_r+0xa>
 8004a6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a70:	07d0      	lsls	r0, r2, #31
 8004a72:	d404      	bmi.n	8004a7e <_fflush_r+0x32>
 8004a74:	0599      	lsls	r1, r3, #22
 8004a76:	d402      	bmi.n	8004a7e <_fflush_r+0x32>
 8004a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a7a:	f7ff fb92 	bl	80041a2 <__retarget_lock_acquire_recursive>
 8004a7e:	4628      	mov	r0, r5
 8004a80:	4621      	mov	r1, r4
 8004a82:	f7ff ff5d 	bl	8004940 <__sflush_r>
 8004a86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a88:	07da      	lsls	r2, r3, #31
 8004a8a:	4605      	mov	r5, r0
 8004a8c:	d4e4      	bmi.n	8004a58 <_fflush_r+0xc>
 8004a8e:	89a3      	ldrh	r3, [r4, #12]
 8004a90:	059b      	lsls	r3, r3, #22
 8004a92:	d4e1      	bmi.n	8004a58 <_fflush_r+0xc>
 8004a94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a96:	f7ff fb85 	bl	80041a4 <__retarget_lock_release_recursive>
 8004a9a:	e7dd      	b.n	8004a58 <_fflush_r+0xc>

08004a9c <__swbuf_r>:
 8004a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9e:	460e      	mov	r6, r1
 8004aa0:	4614      	mov	r4, r2
 8004aa2:	4605      	mov	r5, r0
 8004aa4:	b118      	cbz	r0, 8004aae <__swbuf_r+0x12>
 8004aa6:	6a03      	ldr	r3, [r0, #32]
 8004aa8:	b90b      	cbnz	r3, 8004aae <__swbuf_r+0x12>
 8004aaa:	f7ff fa75 	bl	8003f98 <__sinit>
 8004aae:	69a3      	ldr	r3, [r4, #24]
 8004ab0:	60a3      	str	r3, [r4, #8]
 8004ab2:	89a3      	ldrh	r3, [r4, #12]
 8004ab4:	071a      	lsls	r2, r3, #28
 8004ab6:	d525      	bpl.n	8004b04 <__swbuf_r+0x68>
 8004ab8:	6923      	ldr	r3, [r4, #16]
 8004aba:	b31b      	cbz	r3, 8004b04 <__swbuf_r+0x68>
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	6922      	ldr	r2, [r4, #16]
 8004ac0:	1a98      	subs	r0, r3, r2
 8004ac2:	6963      	ldr	r3, [r4, #20]
 8004ac4:	b2f6      	uxtb	r6, r6
 8004ac6:	4283      	cmp	r3, r0
 8004ac8:	4637      	mov	r7, r6
 8004aca:	dc04      	bgt.n	8004ad6 <__swbuf_r+0x3a>
 8004acc:	4621      	mov	r1, r4
 8004ace:	4628      	mov	r0, r5
 8004ad0:	f7ff ffbc 	bl	8004a4c <_fflush_r>
 8004ad4:	b9e0      	cbnz	r0, 8004b10 <__swbuf_r+0x74>
 8004ad6:	68a3      	ldr	r3, [r4, #8]
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	60a3      	str	r3, [r4, #8]
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	6022      	str	r2, [r4, #0]
 8004ae2:	701e      	strb	r6, [r3, #0]
 8004ae4:	6962      	ldr	r2, [r4, #20]
 8004ae6:	1c43      	adds	r3, r0, #1
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d004      	beq.n	8004af6 <__swbuf_r+0x5a>
 8004aec:	89a3      	ldrh	r3, [r4, #12]
 8004aee:	07db      	lsls	r3, r3, #31
 8004af0:	d506      	bpl.n	8004b00 <__swbuf_r+0x64>
 8004af2:	2e0a      	cmp	r6, #10
 8004af4:	d104      	bne.n	8004b00 <__swbuf_r+0x64>
 8004af6:	4621      	mov	r1, r4
 8004af8:	4628      	mov	r0, r5
 8004afa:	f7ff ffa7 	bl	8004a4c <_fflush_r>
 8004afe:	b938      	cbnz	r0, 8004b10 <__swbuf_r+0x74>
 8004b00:	4638      	mov	r0, r7
 8004b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b04:	4621      	mov	r1, r4
 8004b06:	4628      	mov	r0, r5
 8004b08:	f000 f806 	bl	8004b18 <__swsetup_r>
 8004b0c:	2800      	cmp	r0, #0
 8004b0e:	d0d5      	beq.n	8004abc <__swbuf_r+0x20>
 8004b10:	f04f 37ff 	mov.w	r7, #4294967295
 8004b14:	e7f4      	b.n	8004b00 <__swbuf_r+0x64>
	...

08004b18 <__swsetup_r>:
 8004b18:	b538      	push	{r3, r4, r5, lr}
 8004b1a:	4b2a      	ldr	r3, [pc, #168]	; (8004bc4 <__swsetup_r+0xac>)
 8004b1c:	4605      	mov	r5, r0
 8004b1e:	6818      	ldr	r0, [r3, #0]
 8004b20:	460c      	mov	r4, r1
 8004b22:	b118      	cbz	r0, 8004b2c <__swsetup_r+0x14>
 8004b24:	6a03      	ldr	r3, [r0, #32]
 8004b26:	b90b      	cbnz	r3, 8004b2c <__swsetup_r+0x14>
 8004b28:	f7ff fa36 	bl	8003f98 <__sinit>
 8004b2c:	89a3      	ldrh	r3, [r4, #12]
 8004b2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b32:	0718      	lsls	r0, r3, #28
 8004b34:	d422      	bmi.n	8004b7c <__swsetup_r+0x64>
 8004b36:	06d9      	lsls	r1, r3, #27
 8004b38:	d407      	bmi.n	8004b4a <__swsetup_r+0x32>
 8004b3a:	2309      	movs	r3, #9
 8004b3c:	602b      	str	r3, [r5, #0]
 8004b3e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004b42:	81a3      	strh	r3, [r4, #12]
 8004b44:	f04f 30ff 	mov.w	r0, #4294967295
 8004b48:	e034      	b.n	8004bb4 <__swsetup_r+0x9c>
 8004b4a:	0758      	lsls	r0, r3, #29
 8004b4c:	d512      	bpl.n	8004b74 <__swsetup_r+0x5c>
 8004b4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b50:	b141      	cbz	r1, 8004b64 <__swsetup_r+0x4c>
 8004b52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b56:	4299      	cmp	r1, r3
 8004b58:	d002      	beq.n	8004b60 <__swsetup_r+0x48>
 8004b5a:	4628      	mov	r0, r5
 8004b5c:	f7ff fb24 	bl	80041a8 <_free_r>
 8004b60:	2300      	movs	r3, #0
 8004b62:	6363      	str	r3, [r4, #52]	; 0x34
 8004b64:	89a3      	ldrh	r3, [r4, #12]
 8004b66:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b6a:	81a3      	strh	r3, [r4, #12]
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	6063      	str	r3, [r4, #4]
 8004b70:	6923      	ldr	r3, [r4, #16]
 8004b72:	6023      	str	r3, [r4, #0]
 8004b74:	89a3      	ldrh	r3, [r4, #12]
 8004b76:	f043 0308 	orr.w	r3, r3, #8
 8004b7a:	81a3      	strh	r3, [r4, #12]
 8004b7c:	6923      	ldr	r3, [r4, #16]
 8004b7e:	b94b      	cbnz	r3, 8004b94 <__swsetup_r+0x7c>
 8004b80:	89a3      	ldrh	r3, [r4, #12]
 8004b82:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b8a:	d003      	beq.n	8004b94 <__swsetup_r+0x7c>
 8004b8c:	4621      	mov	r1, r4
 8004b8e:	4628      	mov	r0, r5
 8004b90:	f000 f850 	bl	8004c34 <__smakebuf_r>
 8004b94:	89a0      	ldrh	r0, [r4, #12]
 8004b96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b9a:	f010 0301 	ands.w	r3, r0, #1
 8004b9e:	d00a      	beq.n	8004bb6 <__swsetup_r+0x9e>
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	60a3      	str	r3, [r4, #8]
 8004ba4:	6963      	ldr	r3, [r4, #20]
 8004ba6:	425b      	negs	r3, r3
 8004ba8:	61a3      	str	r3, [r4, #24]
 8004baa:	6923      	ldr	r3, [r4, #16]
 8004bac:	b943      	cbnz	r3, 8004bc0 <__swsetup_r+0xa8>
 8004bae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004bb2:	d1c4      	bne.n	8004b3e <__swsetup_r+0x26>
 8004bb4:	bd38      	pop	{r3, r4, r5, pc}
 8004bb6:	0781      	lsls	r1, r0, #30
 8004bb8:	bf58      	it	pl
 8004bba:	6963      	ldrpl	r3, [r4, #20]
 8004bbc:	60a3      	str	r3, [r4, #8]
 8004bbe:	e7f4      	b.n	8004baa <__swsetup_r+0x92>
 8004bc0:	2000      	movs	r0, #0
 8004bc2:	e7f7      	b.n	8004bb4 <__swsetup_r+0x9c>
 8004bc4:	20000064 	.word	0x20000064

08004bc8 <_sbrk_r>:
 8004bc8:	b538      	push	{r3, r4, r5, lr}
 8004bca:	4d06      	ldr	r5, [pc, #24]	; (8004be4 <_sbrk_r+0x1c>)
 8004bcc:	2300      	movs	r3, #0
 8004bce:	4604      	mov	r4, r0
 8004bd0:	4608      	mov	r0, r1
 8004bd2:	602b      	str	r3, [r5, #0]
 8004bd4:	f7fc f86e 	bl	8000cb4 <_sbrk>
 8004bd8:	1c43      	adds	r3, r0, #1
 8004bda:	d102      	bne.n	8004be2 <_sbrk_r+0x1a>
 8004bdc:	682b      	ldr	r3, [r5, #0]
 8004bde:	b103      	cbz	r3, 8004be2 <_sbrk_r+0x1a>
 8004be0:	6023      	str	r3, [r4, #0]
 8004be2:	bd38      	pop	{r3, r4, r5, pc}
 8004be4:	200003a8 	.word	0x200003a8

08004be8 <__swhatbuf_r>:
 8004be8:	b570      	push	{r4, r5, r6, lr}
 8004bea:	460c      	mov	r4, r1
 8004bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bf0:	2900      	cmp	r1, #0
 8004bf2:	b096      	sub	sp, #88	; 0x58
 8004bf4:	4615      	mov	r5, r2
 8004bf6:	461e      	mov	r6, r3
 8004bf8:	da0d      	bge.n	8004c16 <__swhatbuf_r+0x2e>
 8004bfa:	89a3      	ldrh	r3, [r4, #12]
 8004bfc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004c00:	f04f 0100 	mov.w	r1, #0
 8004c04:	bf0c      	ite	eq
 8004c06:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004c0a:	2340      	movne	r3, #64	; 0x40
 8004c0c:	2000      	movs	r0, #0
 8004c0e:	6031      	str	r1, [r6, #0]
 8004c10:	602b      	str	r3, [r5, #0]
 8004c12:	b016      	add	sp, #88	; 0x58
 8004c14:	bd70      	pop	{r4, r5, r6, pc}
 8004c16:	466a      	mov	r2, sp
 8004c18:	f000 f848 	bl	8004cac <_fstat_r>
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	dbec      	blt.n	8004bfa <__swhatbuf_r+0x12>
 8004c20:	9901      	ldr	r1, [sp, #4]
 8004c22:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004c26:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004c2a:	4259      	negs	r1, r3
 8004c2c:	4159      	adcs	r1, r3
 8004c2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c32:	e7eb      	b.n	8004c0c <__swhatbuf_r+0x24>

08004c34 <__smakebuf_r>:
 8004c34:	898b      	ldrh	r3, [r1, #12]
 8004c36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c38:	079d      	lsls	r5, r3, #30
 8004c3a:	4606      	mov	r6, r0
 8004c3c:	460c      	mov	r4, r1
 8004c3e:	d507      	bpl.n	8004c50 <__smakebuf_r+0x1c>
 8004c40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c44:	6023      	str	r3, [r4, #0]
 8004c46:	6123      	str	r3, [r4, #16]
 8004c48:	2301      	movs	r3, #1
 8004c4a:	6163      	str	r3, [r4, #20]
 8004c4c:	b002      	add	sp, #8
 8004c4e:	bd70      	pop	{r4, r5, r6, pc}
 8004c50:	ab01      	add	r3, sp, #4
 8004c52:	466a      	mov	r2, sp
 8004c54:	f7ff ffc8 	bl	8004be8 <__swhatbuf_r>
 8004c58:	9900      	ldr	r1, [sp, #0]
 8004c5a:	4605      	mov	r5, r0
 8004c5c:	4630      	mov	r0, r6
 8004c5e:	f7ff fb0f 	bl	8004280 <_malloc_r>
 8004c62:	b948      	cbnz	r0, 8004c78 <__smakebuf_r+0x44>
 8004c64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c68:	059a      	lsls	r2, r3, #22
 8004c6a:	d4ef      	bmi.n	8004c4c <__smakebuf_r+0x18>
 8004c6c:	f023 0303 	bic.w	r3, r3, #3
 8004c70:	f043 0302 	orr.w	r3, r3, #2
 8004c74:	81a3      	strh	r3, [r4, #12]
 8004c76:	e7e3      	b.n	8004c40 <__smakebuf_r+0xc>
 8004c78:	89a3      	ldrh	r3, [r4, #12]
 8004c7a:	6020      	str	r0, [r4, #0]
 8004c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c80:	81a3      	strh	r3, [r4, #12]
 8004c82:	9b00      	ldr	r3, [sp, #0]
 8004c84:	6163      	str	r3, [r4, #20]
 8004c86:	9b01      	ldr	r3, [sp, #4]
 8004c88:	6120      	str	r0, [r4, #16]
 8004c8a:	b15b      	cbz	r3, 8004ca4 <__smakebuf_r+0x70>
 8004c8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c90:	4630      	mov	r0, r6
 8004c92:	f000 f81d 	bl	8004cd0 <_isatty_r>
 8004c96:	b128      	cbz	r0, 8004ca4 <__smakebuf_r+0x70>
 8004c98:	89a3      	ldrh	r3, [r4, #12]
 8004c9a:	f023 0303 	bic.w	r3, r3, #3
 8004c9e:	f043 0301 	orr.w	r3, r3, #1
 8004ca2:	81a3      	strh	r3, [r4, #12]
 8004ca4:	89a3      	ldrh	r3, [r4, #12]
 8004ca6:	431d      	orrs	r5, r3
 8004ca8:	81a5      	strh	r5, [r4, #12]
 8004caa:	e7cf      	b.n	8004c4c <__smakebuf_r+0x18>

08004cac <_fstat_r>:
 8004cac:	b538      	push	{r3, r4, r5, lr}
 8004cae:	4d07      	ldr	r5, [pc, #28]	; (8004ccc <_fstat_r+0x20>)
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	4604      	mov	r4, r0
 8004cb4:	4608      	mov	r0, r1
 8004cb6:	4611      	mov	r1, r2
 8004cb8:	602b      	str	r3, [r5, #0]
 8004cba:	f7fb ffd2 	bl	8000c62 <_fstat>
 8004cbe:	1c43      	adds	r3, r0, #1
 8004cc0:	d102      	bne.n	8004cc8 <_fstat_r+0x1c>
 8004cc2:	682b      	ldr	r3, [r5, #0]
 8004cc4:	b103      	cbz	r3, 8004cc8 <_fstat_r+0x1c>
 8004cc6:	6023      	str	r3, [r4, #0]
 8004cc8:	bd38      	pop	{r3, r4, r5, pc}
 8004cca:	bf00      	nop
 8004ccc:	200003a8 	.word	0x200003a8

08004cd0 <_isatty_r>:
 8004cd0:	b538      	push	{r3, r4, r5, lr}
 8004cd2:	4d06      	ldr	r5, [pc, #24]	; (8004cec <_isatty_r+0x1c>)
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	4604      	mov	r4, r0
 8004cd8:	4608      	mov	r0, r1
 8004cda:	602b      	str	r3, [r5, #0]
 8004cdc:	f7fb ffd1 	bl	8000c82 <_isatty>
 8004ce0:	1c43      	adds	r3, r0, #1
 8004ce2:	d102      	bne.n	8004cea <_isatty_r+0x1a>
 8004ce4:	682b      	ldr	r3, [r5, #0]
 8004ce6:	b103      	cbz	r3, 8004cea <_isatty_r+0x1a>
 8004ce8:	6023      	str	r3, [r4, #0]
 8004cea:	bd38      	pop	{r3, r4, r5, pc}
 8004cec:	200003a8 	.word	0x200003a8

08004cf0 <_init>:
 8004cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf2:	bf00      	nop
 8004cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cf6:	bc08      	pop	{r3}
 8004cf8:	469e      	mov	lr, r3
 8004cfa:	4770      	bx	lr

08004cfc <_fini>:
 8004cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cfe:	bf00      	nop
 8004d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d02:	bc08      	pop	{r3}
 8004d04:	469e      	mov	lr, r3
 8004d06:	4770      	bx	lr
